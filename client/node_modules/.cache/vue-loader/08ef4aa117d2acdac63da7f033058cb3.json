{"remainingRequest":"C:\\Proyectos\\occam\\client\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Proyectos\\occam\\client\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\Proyectos\\occam\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Proyectos\\occam\\client\\src\\pages\\Widgets.vue?vue&type=template&id=399ada3b&","dependencies":[{"path":"C:\\Proyectos\\occam\\client\\src\\pages\\Widgets.vue","mtime":1637027077000},{"path":"C:\\Proyectos\\occam\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1637785795160},{"path":"C:\\Proyectos\\occam\\client\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1637785799818},{"path":"C:\\Proyectos\\occam\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1637785795160},{"path":"C:\\Proyectos\\occam\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":1637785798326}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:var render = function () {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "div",
    [
      _vm._m(0),
      _vm._m(1),
      _c(
        "span",
        {
          staticClass:
            "btn-group float-end ms-20px p-2px bg-black bg-opacity-20 rounded",
        },
        [
          _c(
            "a",
            {
              staticClass: "btn btn-sm btn-white border-0",
              class: { active: !_vm.darkMode },
              attrs: { href: "javascript:;" },
              on: {
                click: function ($event) {
                  $event.preventDefault()
                  return _vm.handleChangeWidgetTheme("light")
                },
              },
            },
            [_c("i", { staticClass: "fa fa-sun text-blue" }), _vm._v(" Light")]
          ),
          _c(
            "a",
            {
              staticClass: "btn btn-sm btn-white border-0",
              class: { active: _vm.darkMode },
              attrs: { href: "javascript:;" },
              on: {
                click: function ($event) {
                  $event.preventDefault()
                  return _vm.handleChangeWidgetTheme("inverse")
                },
              },
            },
            [_c("i", { staticClass: "fa fa-moon" }), _vm._v(" Dark")]
          ),
        ]
      ),
      _vm._m(2),
      _c("div", { staticClass: "row" }, [
        _c("div", { staticClass: "col-lg-12 col-xl-4" }, [
          _c("div", { staticClass: "row" }, [
            _c("div", { staticClass: "col-xl-12 col-lg-6" }, [
              _c("div", { staticClass: "mb-10px mt-10px fs-10px" }, [
                _c(
                  "a",
                  {
                    directives: [
                      {
                        name: "b-modal",
                        rawName: "v-b-modal.modalWidgetList",
                        modifiers: { modalWidgetList: true },
                      },
                    ],
                    staticClass:
                      "float-end text-gray-600 text-decoration-none me-3px fw-bold",
                  },
                  [_vm._v("source code")]
                ),
                _c("b", { staticClass: "text-dark" }, [_vm._v("WIDGET LIST")]),
              ]),
              _c(
                "div",
                {
                  staticClass: "widget-list rounded mb-4",
                  class: { "dark-mode": _vm.darkMode },
                },
                [
                  _c("div", { staticClass: "widget-list-item" }, [
                    _vm._m(3),
                    _vm._m(4),
                    _c(
                      "div",
                      { staticClass: "widget-list-action" },
                      [
                        _c(
                          "b-dropdown",
                          {
                            attrs: {
                              variant: "none",
                              "no-caret": true,
                              right: "",
                              "toggle-class": "text-dark text-opacity-50",
                            },
                          },
                          [
                            _c("template", { slot: "button-content" }, [
                              _c("i", {
                                staticClass: "fa fa-ellipsis-h fs-14px",
                              }),
                            ]),
                            _c("b-dropdown-item", [_vm._v("Option 1")]),
                            _c("b-dropdown-item", [_vm._v("Option 2")]),
                            _c("b-dropdown-item", [_vm._v("Option 3")]),
                            _c("b-dropdown-divider"),
                            _c("b-dropdown-item", [_vm._v("Option 4")]),
                          ],
                          2
                        ),
                      ],
                      1
                    ),
                  ]),
                  _c("div", { staticClass: "widget-list-item" }, [
                    _vm._m(5),
                    _vm._m(6),
                    _c(
                      "div",
                      { staticClass: "widget-list-action" },
                      [
                        _c(
                          "b-dropdown",
                          {
                            attrs: {
                              variant: "none",
                              "no-caret": true,
                              right: "",
                              "toggle-class": "text-dark text-opacity-50",
                            },
                          },
                          [
                            _c("template", { slot: "button-content" }, [
                              _c("i", {
                                staticClass: "fa fa-ellipsis-h fs-14px",
                              }),
                            ]),
                            _c("b-dropdown-item", [_vm._v("Option 1")]),
                            _c("b-dropdown-item", [_vm._v("Option 2")]),
                            _c("b-dropdown-item", [_vm._v("Option 3")]),
                            _c("b-dropdown-divider"),
                            _c("b-dropdown-item", [_vm._v("Option 4")]),
                          ],
                          2
                        ),
                      ],
                      1
                    ),
                  ]),
                  _c("div", { staticClass: "widget-list-item" }, [
                    _vm._m(7),
                    _vm._m(8),
                    _c(
                      "div",
                      { staticClass: "widget-list-action" },
                      [
                        _c(
                          "b-dropdown",
                          {
                            attrs: {
                              variant: "none",
                              "no-caret": true,
                              right: "",
                              "toggle-class": "text-dark text-opacity-50",
                            },
                          },
                          [
                            _c("template", { slot: "button-content" }, [
                              _c("i", {
                                staticClass: "fa fa-ellipsis-h fs-14px",
                              }),
                            ]),
                            _c("b-dropdown-item", [_vm._v("Option 1")]),
                            _c("b-dropdown-item", [_vm._v("Option 2")]),
                            _c("b-dropdown-item", [_vm._v("Option 3")]),
                            _c("b-dropdown-divider"),
                            _c("b-dropdown-item", [_vm._v("Option 4")]),
                          ],
                          2
                        ),
                      ],
                      1
                    ),
                  ]),
                ]
              ),
            ]),
            _c("div", { staticClass: "col-xl-12 col-lg-6" }, [
              _c("div", { staticClass: "mb-10px mt-10px fs-10px" }, [
                _c(
                  "a",
                  {
                    directives: [
                      {
                        name: "b-modal",
                        rawName: "v-b-modal.modalWidgetListWithIcon",
                        modifiers: { modalWidgetListWithIcon: true },
                      },
                    ],
                    staticClass:
                      "float-end text-gray-600 text-decoration-none me-3px fw-bold",
                  },
                  [_vm._v("source code")]
                ),
                _c("b", { staticClass: "text-dark" }, [
                  _vm._v("WIDGET LIST WITH ICON"),
                ]),
              ]),
              _c(
                "div",
                {
                  staticClass: "widget-list rounded mb-4",
                  class: { "dark-mode": _vm.darkMode },
                },
                [_vm._m(9), _vm._m(10), _vm._m(11), _vm._m(12), _vm._m(13)]
              ),
            ]),
            _c("div", { staticClass: "col-xl-12 col-lg-6" }, [
              _c("div", { staticClass: "mb-10px mt-10px fs-10px" }, [
                _c(
                  "a",
                  {
                    directives: [
                      {
                        name: "b-modal",
                        rawName: "v-b-modal.modalWidgetChatInput",
                        modifiers: { modalWidgetChatInput: true },
                      },
                    ],
                    staticClass:
                      "float-end text-gray-600 text-decoration-none me-3px fw-bold",
                  },
                  [_vm._v("source code")]
                ),
                _c("b", { staticClass: "text-dark" }, [_vm._v("WIDGET CHAT")]),
              ]),
              _c(
                "div",
                {
                  staticClass: "widget-chat rounded mb-4",
                  class: { "dark-mode": _vm.darkMode },
                },
                [
                  _vm._m(14),
                  _c(
                    "vue-custom-scrollbar",
                    {
                      staticClass: "widget-chat-body",
                      staticStyle: { height: "235px" },
                    },
                    [
                      _c(
                        "div",
                        { staticClass: "widget-chat-item with-media start" },
                        [
                          _c("div", { staticClass: "widget-chat-media" }, [
                            _c("img", {
                              attrs: {
                                alt: "",
                                src: "/assets/img/user/user-1.jpg",
                              },
                            }),
                          ]),
                          _c("div", { staticClass: "widget-chat-info" }, [
                            _c(
                              "div",
                              { staticClass: "widget-chat-info-container" },
                              [
                                _c(
                                  "div",
                                  {
                                    staticClass: "widget-chat-name text-indigo",
                                  },
                                  [_vm._v("Hudson Mendes")]
                                ),
                                _c(
                                  "div",
                                  { staticClass: "widget-chat-message" },
                                  [
                                    _vm._v(
                                      "Should we plan for a company trip this year?"
                                    ),
                                  ]
                                ),
                                _c("div", { staticClass: "widget-chat-time" }, [
                                  _vm._v("6:00PM"),
                                ]),
                              ]
                            ),
                          ]),
                        ]
                      ),
                      _c(
                        "div",
                        { staticClass: "widget-chat-item with-media start" },
                        [
                          _c("div", { staticClass: "widget-chat-media" }, [
                            _c("img", {
                              attrs: {
                                alt: "",
                                src: "/assets/img/user/user-2.jpg",
                              },
                            }),
                          ]),
                          _c("div", { staticClass: "widget-chat-info" }, [
                            _c(
                              "div",
                              { staticClass: "widget-chat-info-container" },
                              [
                                _c(
                                  "div",
                                  {
                                    staticClass:
                                      "widget-chat-name text-primary",
                                  },
                                  [_vm._v("Sam Sugerman")]
                                ),
                                _c(
                                  "div",
                                  { staticClass: "widget-chat-message" },
                                  [_vm._v("ok let's do it")]
                                ),
                                _c("div", { staticClass: "widget-chat-time" }, [
                                  _vm._v("6:01PM"),
                                ]),
                              ]
                            ),
                          ]),
                        ]
                      ),
                      _c("div", { staticClass: "widget-chat-item end" }, [
                        _c("div", { staticClass: "widget-chat-info" }, [
                          _c(
                            "div",
                            { staticClass: "widget-chat-info-container" },
                            [
                              _c(
                                "div",
                                { staticClass: "widget-chat-message" },
                                [_vm._v("i'm ok with it")]
                              ),
                              _c("div", { staticClass: "widget-chat-time" }, [
                                _vm._v("6:05PM"),
                              ]),
                            ]
                          ),
                        ]),
                      ]),
                      _c(
                        "div",
                        {
                          staticClass: "text-center text-gray-500 m-2 fw-bold",
                        },
                        [_vm._v("Today")]
                      ),
                      _c(
                        "div",
                        { staticClass: "widget-chat-item with-media start" },
                        [
                          _c("div", { staticClass: "widget-chat-media" }, [
                            _c("img", {
                              attrs: {
                                alt: "",
                                src: "/assets/img/user/user-3.jpg",
                              },
                            }),
                          ]),
                          _c("div", { staticClass: "widget-chat-info" }, [
                            _c(
                              "div",
                              { staticClass: "widget-chat-info-container" },
                              [
                                _c(
                                  "div",
                                  {
                                    staticClass: "widget-chat-name text-orange",
                                  },
                                  [_vm._v("Jaxon Allwood")]
                                ),
                                _c(
                                  "div",
                                  { staticClass: "widget-chat-message" },
                                  [
                                    _vm._v(
                                      " Here is some images for New Zealand "
                                    ),
                                    _c("div", { staticClass: "row mt-5px" }, [
                                      _c("div", { staticClass: "col-md-4" }, [
                                        _c(
                                          "a",
                                          {
                                            staticClass:
                                              "widget-card widget-card-sm square mb-2px",
                                            attrs: { href: "javascript:;" },
                                          },
                                          [
                                            _c("div", {
                                              staticClass: "widget-card-cover",
                                              staticStyle: {
                                                "background-image":
                                                  "url(/assets/img/gallery/gallery-51-thumb.jpg)",
                                              },
                                            }),
                                          ]
                                        ),
                                        _c(
                                          "a",
                                          {
                                            staticClass:
                                              "widget-card widget-card-sm square mb-2px",
                                            attrs: { href: "javascript:;" },
                                          },
                                          [
                                            _c("div", {
                                              staticClass: "widget-card-cover",
                                              staticStyle: {
                                                "background-image":
                                                  "url(/assets/img/gallery/gallery-52-thumb.jpg)",
                                              },
                                            }),
                                          ]
                                        ),
                                      ]),
                                      _c("div", { staticClass: "col-md-4" }, [
                                        _c(
                                          "a",
                                          {
                                            staticClass:
                                              "widget-card widget-card-sm square mb-2px",
                                            attrs: { href: "javascript:;" },
                                          },
                                          [
                                            _c("div", {
                                              staticClass: "widget-card-cover",
                                              staticStyle: {
                                                "background-image":
                                                  "url(/assets/img/gallery/gallery-53-thumb.jpg)",
                                              },
                                            }),
                                          ]
                                        ),
                                        _c(
                                          "a",
                                          {
                                            staticClass:
                                              "widget-card widget-card-sm square mb-2px",
                                            attrs: { href: "javascript:;" },
                                          },
                                          [
                                            _c("div", {
                                              staticClass: "widget-card-cover",
                                              staticStyle: {
                                                "background-image":
                                                  "url(/assets/img/gallery/gallery-54-thumb.jpg)",
                                              },
                                            }),
                                          ]
                                        ),
                                      ]),
                                      _c("div", { staticClass: "col-md-4" }, [
                                        _c(
                                          "a",
                                          {
                                            staticClass:
                                              "widget-card widget-card-sm square mb-2px",
                                            attrs: { href: "javascript:;" },
                                          },
                                          [
                                            _c("div", {
                                              staticClass: "widget-card-cover",
                                              staticStyle: {
                                                "background-image":
                                                  "url(/assets/img/gallery/gallery-59-thumb.jpg)",
                                              },
                                            }),
                                          ]
                                        ),
                                        _c(
                                          "a",
                                          {
                                            staticClass:
                                              "widget-card widget-card-sm square mb-2px",
                                            attrs: { href: "javascript:;" },
                                          },
                                          [
                                            _c("div", {
                                              staticClass: "widget-card-cover",
                                              staticStyle: {
                                                "background-image":
                                                  "url(/assets/img/gallery/gallery-60-thumb.jpg)",
                                              },
                                            }),
                                          ]
                                        ),
                                      ]),
                                    ]),
                                  ]
                                ),
                                _c("div", { staticClass: "widget-chat-time" }, [
                                  _vm._v("6:20PM"),
                                ]),
                              ]
                            ),
                          ]),
                        ]
                      ),
                    ]
                  ),
                  _vm._m(15),
                ],
                1
              ),
            ]),
            _c("div", { staticClass: "col-xl-12 col-lg-6" }, [
              _c("div", { staticClass: "mb-10px mt-10px fs-10px" }, [
                _c(
                  "a",
                  {
                    directives: [
                      {
                        name: "b-modal",
                        rawName: "v-b-modal.modalWidgetTodolist",
                        modifiers: { modalWidgetTodolist: true },
                      },
                    ],
                    staticClass:
                      "float-end text-gray-600 text-decoration-none me-3px fw-bold",
                  },
                  [_vm._v("source code")]
                ),
                _c("b", { staticClass: "text-dark" }, [
                  _vm._v("WIDGET TODOLIST"),
                ]),
              ]),
              _c(
                "div",
                {
                  staticClass: "widget-todolist rounded mb-4",
                  class: { "dark-mode": _vm.darkMode },
                },
                [_vm._m(16), _vm._m(17)]
              ),
            ]),
            _c("div", { staticClass: "col-xl-12 col-lg-6" }, [
              _c("div", { staticClass: "mb-10px mt-10px fs-10px" }, [
                _c(
                  "a",
                  {
                    directives: [
                      {
                        name: "b-modal",
                        rawName: "v-b-modal.modalWidgetMap",
                        modifiers: { modalWidgetMap: true },
                      },
                    ],
                    staticClass:
                      "float-end text-gray-600 text-decoration-none me-3px fw-bold",
                  },
                  [_vm._v("source code")]
                ),
                _c("b", { staticClass: "text-dark" }, [_vm._v("WIDGET MAP")]),
              ]),
              _c(
                "div",
                {
                  staticClass: "widget-map rounded mb-4",
                  class: { "dark-mode": _vm.darkMode },
                },
                [
                  _vm._m(18),
                  _vm._m(19),
                  _c(
                    "div",
                    {
                      staticClass: "widget-map-list",
                      class: { "dark-mode": _vm.darkMode },
                    },
                    [_vm._m(20)]
                  ),
                ]
              ),
            ]),
          ]),
        ]),
        _c("div", { staticClass: "col-lg-12 col-xl-8" }, [
          _c("div", { staticClass: "mb-10px mt-10px fs-10px" }, [
            _c(
              "a",
              {
                directives: [
                  {
                    name: "b-modal",
                    rawName: "v-b-modal.modalWidgetImgIcon",
                    modifiers: { modalWidgetImgIcon: true },
                  },
                ],
                staticClass:
                  "float-end text-gray-600 text-decoration-none me-3px fw-bold",
              },
              [_vm._v("source code")]
            ),
            _c("b", { staticClass: "text-dark" }, [
              _vm._v("WIDGET IMAGE / ICON"),
            ]),
          ]),
          _c("div", { staticClass: "row mb-4" }, [
            _c("div", { staticClass: "col-sm-6" }, [
              _vm._m(21),
              _c("div", { staticClass: "clearfix" }, [
                _c(
                  "div",
                  {
                    staticClass:
                      "widget-icon widget-icon-xl user rounded float-start me-5px mb-5px text-white",
                    class: {
                      "bg-inverse text-white-transparent-5": _vm.darkMode,
                      "bg-grey text-white": !_vm.darkMode,
                    },
                  },
                  [_c("i", { staticClass: "fa fa-user" })]
                ),
                _c(
                  "div",
                  {
                    staticClass:
                      "widget-icon widget-icon-lg user rounded float-start me-5px mb-5px text-white",
                    class: {
                      "bg-inverse text-white-transparent-5": _vm.darkMode,
                      "bg-grey text-white": !_vm.darkMode,
                    },
                  },
                  [_c("i", { staticClass: "fa fa-user" })]
                ),
                _c(
                  "div",
                  {
                    staticClass:
                      "widget-icon user rounded float-start me-5px mb-5px text-white",
                    class: {
                      "bg-inverse text-white-transparent-5": _vm.darkMode,
                      "bg-grey text-white": !_vm.darkMode,
                    },
                  },
                  [_c("i", { staticClass: "fa fa-user" })]
                ),
                _c(
                  "div",
                  {
                    staticClass:
                      "widget-icon widget-icon-sm user rounded float-start me-5px mb-5px text-white",
                    class: {
                      "bg-inverse text-white-transparent-5": _vm.darkMode,
                      "bg-grey text-white": !_vm.darkMode,
                    },
                  },
                  [_c("i", { staticClass: "fa fa-user" })]
                ),
                _c(
                  "div",
                  {
                    staticClass:
                      "widget-icon widget-icon-xs user rounded float-start me-5px mb-5px text-white",
                    class: {
                      "bg-inverse text-white-transparent-5": _vm.darkMode,
                      "bg-grey text-white": !_vm.darkMode,
                    },
                  },
                  [_c("i", { staticClass: "fa fa-user" })]
                ),
              ]),
            ]),
            _vm._m(22),
          ]),
          _c("div", { staticClass: "mb-10px mt-10px fs-10px" }, [
            _c(
              "a",
              {
                directives: [
                  {
                    name: "b-modal",
                    rawName: "v-b-modal.modalWidgetCard",
                    modifiers: { modalWidgetCard: true },
                  },
                ],
                staticClass:
                  "float-end text-gray-600 text-decoration-none me-3px fw-bold",
              },
              [_vm._v("source code")]
            ),
            _c("b", { staticClass: "text-dark" }, [_vm._v("WIDGET CARD")]),
          ]),
          _c("div", { staticClass: "row" }, [
            _c("div", { staticClass: "col-sm-6" }, [
              _c(
                "a",
                {
                  staticClass: "widget-card rounded mb-20px",
                  class: { "dark-mode": _vm.darkMode },
                  attrs: { href: "javascript:;" },
                },
                [
                  _c("div", {
                    staticClass: "widget-card-cover rounded",
                    staticStyle: {
                      "background-image":
                        "url(/assets/img/gallery/gallery-portrait-11-thumb.jpg)",
                    },
                  }),
                  _vm._m(23),
                  _vm._m(24),
                ]
              ),
            ]),
            _c("div", { staticClass: "col-sm-6" }, [
              _c(
                "a",
                {
                  staticClass: "widget-card rounded mb-20px",
                  class: { "dark-mode": _vm.darkMode },
                  attrs: { href: "javascript:;" },
                },
                [
                  _c("div", { staticClass: "widget-card-cover rounded" }),
                  _c("div", { staticClass: "widget-card-content" }, [
                    _c(
                      "h5",
                      {
                        staticClass: "fs-12px",
                        class: {
                          "text-white text-opacity-75": _vm.darkMode,
                          "text-dark text-opacity-75": !_vm.darkMode,
                        },
                      },
                      [_c("b", [_vm._v("MAKING A DIFFERENCE")])]
                    ),
                    _vm._m(25),
                    _c("i", {
                      staticClass:
                        "fa fa-heartbeat fa-5x text-pink text-opacity-50",
                    }),
                  ]),
                  _c("div", { staticClass: "widget-card-content bottom" }, [
                    _c(
                      "b",
                      {
                        staticClass: "fs-12px",
                        class: {
                          "text-white text-opacity-75": _vm.darkMode,
                          "text-dark text-opacity-75": !_vm.darkMode,
                        },
                      },
                      [_vm._v("Opt in and help heart research.")]
                    ),
                  ]),
                ]
              ),
            ]),
          ]),
          _c("div", { staticClass: "mb-10px mt-10px fs-10px" }, [
            _c(
              "a",
              {
                directives: [
                  {
                    name: "b-modal",
                    rawName: "v-b-modal.modalWidgetCardSquare",
                    modifiers: { modalWidgetCardSquare: true },
                  },
                ],
                staticClass:
                  "float-end text-gray-600 text-decoration-none me-3px fw-bold",
              },
              [_vm._v("source code")]
            ),
            _c("b", { staticClass: "text-dark" }, [
              _vm._v("WIDGET CARD SQUARE"),
            ]),
          ]),
          _vm._m(26),
          _c("div", { staticClass: "mb-10px mt-10px fs-10px" }, [
            _c(
              "a",
              {
                directives: [
                  {
                    name: "b-modal",
                    rawName: "v-b-modal.modalWidgetStat",
                    modifiers: { modalWidgetStat: true },
                  },
                ],
                staticClass:
                  "float-end text-gray-600 text-decoration-none me-3px fw-bold",
              },
              [_vm._v("source code")]
            ),
            _c("b", { staticClass: "text-dark" }, [_vm._v("WIDGET STAT")]),
          ]),
          _vm._m(27),
          _c("div", { staticClass: "mb-10px mt-10px fs-10px" }, [
            _c(
              "a",
              {
                directives: [
                  {
                    name: "b-modal",
                    rawName: "v-b-modal.modalWidgetChart",
                    modifiers: { modalWidgetChart: true },
                  },
                ],
                staticClass:
                  "float-end text-gray-600 text-decoration-none me-3px fw-bold",
              },
              [_vm._v("source code")]
            ),
            _c("b", { staticClass: "text-dark" }, [_vm._v("WIDGET CHART")]),
          ]),
          _c(
            "div",
            {
              staticClass: "widget rounded mb-4",
              class: { "dark-mode": _vm.darkMode },
            },
            [
              _vm._m(28),
              _c("div", { staticClass: "row m-0" }, [
                _c("div", { staticClass: "col widget-chart-content" }, [
                  _c(
                    "div",
                    {
                      staticStyle: { height: "108%" },
                      attrs: { id: "nv-stacked-area-chart" },
                    },
                    [
                      _c("vn-stacked-area", {
                        attrs: {
                          model: _vm.stackedAreaChart.data,
                          yFormat: ",.4f",
                          height: _vm.stackedAreaChart.height,
                          xFormat: _vm.formatDate,
                          clipEdge: _vm.stackedAreaChart.clipEdge,
                          rightAlignYAxis: _vm.stackedAreaChart.rightAlignYAxis,
                          showControls: _vm.stackedAreaChart.showControls,
                        },
                      }),
                    ],
                    1
                  ),
                ]),
                _vm._m(29),
              ]),
            ]
          ),
          _c("div", { staticClass: "mb-10px mt-10px fs-10px" }, [
            _c(
              "a",
              {
                directives: [
                  {
                    name: "b-modal",
                    rawName: "v-b-modal.modalWidgetTable",
                    modifiers: { modalWidgetTable: true },
                  },
                ],
                staticClass:
                  "float-end text-gray-600 text-decoration-none me-3px fw-bold",
              },
              [_vm._v("source code")]
            ),
            _c("b", { staticClass: "text-dark" }, [_vm._v("WIDGET TABLE")]),
          ]),
          _c("div", { staticClass: "table-responsive" }, [
            _c(
              "table",
              {
                staticClass: "table table-bordered widget-table rounded",
                class: { "dark-mode": _vm.darkMode },
              },
              [
                _vm._m(30),
                _c("tbody", [
                  _c("tr", [
                    _vm._m(31),
                    _c("td", [
                      _c("h5", { staticClass: "mb-1" }, [
                        _vm._v("Mavic Pro Combo"),
                      ]),
                      _c(
                        "p",
                        {
                          staticClass:
                            "fs-11px fw-bold text-dark text-opacity-50 mb-3",
                        },
                        [
                          _vm._v(
                            "Portable yet powerful, the Mavic Pro is your personal drone, ready to go with you everywhere."
                          ),
                        ]
                      ),
                      _vm._m(32),
                      _c("div", { staticClass: "clearfix fs-10px" }, [
                        _vm._v(" status: "),
                        _c(
                          "b",
                          {
                            class: {
                              "text-white": _vm.darkMode,
                              "text-dark": !_vm.darkMode,
                            },
                          },
                          [_vm._v("Shipped")]
                        ),
                      ]),
                    ]),
                    _c("td", { staticClass: "text-nowrap" }, [
                      _c(
                        "b",
                        {
                          class: {
                            "text-white": _vm.darkMode,
                            "text-dark": !_vm.darkMode,
                          },
                        },
                        [_vm._v("$999")]
                      ),
                      _c("br"),
                      _c(
                        "small",
                        {
                          class: {
                            "text-white": _vm.darkMode,
                            "text-dark": !_vm.darkMode,
                          },
                        },
                        [_c("del", [_vm._v("$1,202")])]
                      ),
                    ]),
                    _c("td", [_vm._v("1")]),
                    _c("td", [_vm._v("999.00")]),
                    _c("td", [
                      _c(
                        "a",
                        {
                          staticClass: "btn btn-sm w-80px rounded-pill",
                          class: {
                            "btn-default": _vm.darkMode,
                            "btn-inverse": !_vm.darkMode,
                          },
                          attrs: { href: "javascript:;" },
                        },
                        [_vm._v("Edit")]
                      ),
                    ]),
                  ]),
                  _c("tr", [
                    _vm._m(33),
                    _c("td", [
                      _c("h5", { staticClass: "mb-1" }, [_vm._v("Inspire 2")]),
                      _c(
                        "p",
                        {
                          staticClass:
                            "fs-11px fw-bold text-dark text-opacity-50 mb-3",
                        },
                        [_vm._v("Cinematic aerial performance for filmmakers.")]
                      ),
                      _vm._m(34),
                      _c("div", { staticClass: "clearfix fs-10px" }, [
                        _vm._v(" status: "),
                        _c(
                          "b",
                          {
                            class: {
                              "text-white": _vm.darkMode,
                              "text-dark": !_vm.darkMode,
                            },
                          },
                          [_vm._v("received")]
                        ),
                      ]),
                    ]),
                    _c("td", { staticClass: "text-nowrap" }, [
                      _c(
                        "b",
                        {
                          class: {
                            "text-white": _vm.darkMode,
                            "text-dark": !_vm.darkMode,
                          },
                        },
                        [_vm._v("$999")]
                      ),
                      _c("br"),
                      _c(
                        "small",
                        {
                          class: {
                            "text-white": _vm.darkMode,
                            "text-dark": !_vm.darkMode,
                          },
                        },
                        [_c("del", [_vm._v("$1,202")])]
                      ),
                    ]),
                    _c("td", [_vm._v("1")]),
                    _c("td", [_vm._v("999.00")]),
                    _c("td", [
                      _c(
                        "a",
                        {
                          staticClass: "btn btn-sm w-80px rounded-pill",
                          class: {
                            "btn-default": _vm.darkMode,
                            "btn-inverse": !_vm.darkMode,
                          },
                          attrs: { href: "javascript:;" },
                        },
                        [_vm._v("Edit")]
                      ),
                    ]),
                  ]),
                ]),
              ]
            ),
          ]),
        ]),
      ]),
      _c(
        "b-modal",
        {
          ref: "modalWidgetMap",
          attrs: {
            id: "modalWidgetMap",
            size: "lg",
            "body-class": "p-0",
            "cancel-variant": "default",
          },
        },
        [
          _c("template", { slot: "modal-header" }, [
            _c("h4", { staticClass: "modal-title" }, [_vm._v("Widget Map")]),
            _c("a", {
              staticClass: "btn-close",
              on: {
                click: function ($event) {
                  return _vm.$bvModal.hide("modalWidgetMap")
                },
              },
            }),
          ]),
          _c(
            "div",
            {
              directives: [{ name: "highlight", rawName: "v-highlight" }],
              staticClass: "hljs-wrapper mb-0",
            },
            [
              _c("pre", { staticClass: "mb-0" }, [
                _c("code", { staticClass: "html" }, [
                  _vm._v(
                    '<!-- begin widget-map -->\n<div class="widget-map rounded'
                  ),
                  _c("span", {
                    staticClass: "hljs-string",
                    attrs: {
                      "data-id": "widget-doc",
                      "data-dark-doc": " dark-mode",
                      "data-light-doc": "",
                    },
                  }),
                  _vm._v(
                    '">\n  <!-- begin widget-input-container -->\n  <div class="widget-input-container">\n    <div class="widget-input-icon"><a href="#" class="text-dark"><i class="fa fa-ellipsis-v"></i></a></div>\n    <div class="widget-input-box">\n      <input type="text" class="form-control" placeholder="Search here">\n    </div>\n    <div class="widget-input-icon"><a href="#" class="text-dark"><i class="fa fa-microphone"></i></a></div>\n    <div class="widget-input-divider"></div>\n    <div class="widget-input-icon"><a href="#"><i class="fa fa-location-arrow"></i></a></div>\n  </div>\n  <!-- end widget-input-container -->\n  <!-- begin widget-map-body -->\n  <div class="widget-map-body">\n    <iframe src="-- googlemap embed url here --" width="100%" height="230" frameborder="0" style="border:0" allowfullscreen></iframe>\n  </div>\n  <!-- end widget-map-body -->\n  <!-- begin widget-map-list -->\n  <div class="widget-map-list">\n    <div class="widget-list bg-none mb-4">\n      <!-- begin widget-list-item -->\n      <div class="widget-list-item">\n        <div class="widget-list-media text-center">\n          <a href="#"><i class="fab fa-twitter fa-3x"></i></a>\n        </div>\n        <div class="widget-list-content">\n          <h4 class="widget-list-title">Twitter Headquater</h4>\n          <p class="widget-list-desc">Corporate Office</p>\n        </div>\n        <div class="widget-list-action">\n          <a href="#" data-bs-toggle="dropdown" class="text-gray-500"><i class="fa fa-angle-right fa-2x"></i></a>\n        </div>\n      </div>\n      <!-- end widget-list-item -->\n    </div>\n  </div>\n  <!-- end widget-map-list -->\n</div>\n<!-- begin widget-map -->'
                  ),
                ]),
              ]),
            ]
          ),
        ],
        2
      ),
      _c(
        "b-modal",
        {
          ref: "modalWidgetTodolist",
          attrs: {
            id: "modalWidgetTodolist",
            size: "lg",
            "body-class": "p-0",
            "cancel-variant": "default",
          },
        },
        [
          _c("template", { slot: "modal-header" }, [
            _c("h4", { staticClass: "modal-title" }, [
              _vm._v("Widget Todolist"),
            ]),
            _c("a", {
              staticClass: "btn-close",
              on: {
                click: function ($event) {
                  return _vm.$bvModal.hide("modalWidgetTodolist")
                },
              },
            }),
          ]),
          _c(
            "div",
            {
              directives: [{ name: "highlight", rawName: "v-highlight" }],
              staticClass: "hljs-wrapper mb-0",
            },
            [
              _c("pre", { staticClass: "mb-0" }, [
                _c(
                  "code",
                  {
                    staticClass: "html",
                    attrs: { id: "source-widget-todolist" },
                  },
                  [
                    _vm._v(
                      '<!-- begin widget-todolist -->\n<div class="widget-todolist rounded'
                    ),
                    _c("span", {
                      staticClass: "hljs-string",
                      attrs: {
                        "data-id": "widget-doc",
                        "data-dark-doc": " dark-mode",
                        "data-light-doc": "",
                      },
                    }),
                    _vm._v(
                      '">\n  <!-- begin widget-todolist-header -->\n  <div class="widget-todolist-header">\n    <h4 class="widget-todolist-header-title">Todolist</h4>\n    <div class="widget-todolist-header-total">\n      <span class="text-dark">0</span>\n      <small>Done</small>\n    </div>\n  </div>\n  <!-- end widget-todolist-header -->\n  \n  <!-- begin widget-todolist-body -->\n  <div class="widget-todolist-body">\n    <!-- begin widget-todolist-item -->\n    <div class="widget-todolist-item">\n      <div class="widget-todolist-input">\n        <div class="form-check">\n          <input class="form-check-input" type="checkbox" id="widget_todolist_1" />\n          <label class="form-check-label" for="widget_todolist_1" class="ps-15px"> </label>\n        </div>\n      </div>\n      <div class="widget-todolist-content">\n        <h6 class="mb-0">Borrow Tony\'s travel guide</h4>\n        <div class="text-muted">Vacation in Rome</p>\n      </div>\n      <div class="widget-todolist-icon">\n        <a href="#"><i class="fa fa-question-circle"></i></a>\n      </div>\n    </div>\n    <!-- end widget-todolist-item -->\n    ...\n    <!-- begin widget-todolist-item -->\n    <div class="widget-todolist-item">\n      <div class="widget-todolist-input">\n        <i class="fa fa-plus text-gray-500"></i>\n      </div>\n      <div class="widget-todolist-content">\n        <input type="text" class="form-control" placeholder="Write your task here..." />\n      </div>\n    </div>\n    <!-- end widget-todolist-item -->\n  </div>\n  <!-- end widget-todolist-body -->\n</div>\n<!-- end widget-todolist -->'
                    ),
                  ]
                ),
              ]),
            ]
          ),
        ],
        2
      ),
      _c(
        "b-modal",
        {
          ref: "modalWidgetChatInput",
          attrs: {
            id: "modalWidgetChatInput",
            size: "lg",
            "body-class": "p-0",
            "cancel-variant": "default",
          },
        },
        [
          _c("template", { slot: "modal-header" }, [
            _c("h4", { staticClass: "modal-title" }, [
              _vm._v("Widget Chat & Input"),
            ]),
            _c("a", {
              staticClass: "btn-close",
              on: {
                click: function ($event) {
                  return _vm.$bvModal.hide("modalWidgetChatInput")
                },
              },
            }),
          ]),
          _c(
            "div",
            {
              directives: [{ name: "highlight", rawName: "v-highlight" }],
              staticClass: "hljs-wrapper mb-0",
            },
            [
              _c("pre", { staticClass: "mb-0" }, [
                _c(
                  "code",
                  {
                    staticClass: "html",
                    attrs: { id: "source-widget-chat-input" },
                  },
                  [
                    _vm._v(
                      '<!-- begin widget-chat -->\n<div class="widget-chat rounded'
                    ),
                    _c("span", {
                      staticClass: "hljs-string",
                      attrs: {
                        "data-id": "widget-doc",
                        "data-dark-doc": " dark-mode",
                        "data-light-doc": "",
                      },
                    }),
                    _vm._v(
                      '">\n  <!-- begin widget-chat-header -->\n  <div class="widget-chat-header">\n    <div class="widget-chat-header-icon">\n      <i class="fab fa-earlybirds w-30px h-30px fs-20px bg-yellow text-dark text-center rounded-pill" style="line-height: 30px"></i>\n    </div>\n    <div class="widget-chat-header-content">\n      <h4 class="widget-chat-header-title">Company Discussion Group</h4>\n      <p class="widget-chat-header-desc">55 members, 4 online</p>\n    </div>\n  </div>\n  <!-- end widget-chat-header -->\n  \n  <!-- begin widget-chat-body -->\n  <div class="widget-chat-body" data-scrollbar="true" data-height="235px">\n    <div class="text-center text-gray-500 m-3 fw-bold">Today</div>\n    <div class="widget-chat-item with-media start">\n      <div class="widget-chat-media">\n        <img alt="" src="/assets/img/user/user-1.jpg" />\n      </div>\n      <div class="widget-chat-info">\n        <div class="widget-chat-info-container">\n          <div class="widget-chat-name text-indigo">Hudson Mendes</div>\n          <div class="widget-chat-message">Should we plan for a company trip this year?</div>\n          <div class="widget-chat-time">6:00PM</div>\n        </div>\n      </div>\n    </div>\n    <div class="widget-chat-item end">\n      ...\n    </div>\n  </div>\n  <!-- end widget-chat-body -->\n  \n  <!-- begin widget-input -->\n  <div class="widget-input">\n    <form action="" method="POST" name="">\n      <div class="widget-input-container">\n        <div class="widget-input-icon"><a href="#" class="text-gray-500"><i class="fa fa-camera"></i></a></div>\n        <div class="widget-input-box">\n          <input type="text" class="form-control" placeholder="Write a message..." />\n        </div>\n        <div class="widget-input-icon"><a href="#" class="text-gray-500"><i class="fa fa-smile"></i></a></div>\n        <div class="widget-input-divider"></div>\n        <div class="widget-input-icon"><a href="#" class="text-gray-500"><i class="fa fa-microphone"></i></a></div>\n      </div>\n    </form>\n  </div>\n  <!-- end widget-input -->\n</div>\n<!-- end widget-chat -->'
                    ),
                  ]
                ),
              ]),
            ]
          ),
        ],
        2
      ),
      _c(
        "b-modal",
        {
          ref: "modalWidgetList",
          attrs: {
            id: "modalWidgetList",
            size: "lg",
            "body-class": "p-0",
            "cancel-variant": "default",
          },
        },
        [
          _c("template", { slot: "modal-header" }, [
            _c("h4", { staticClass: "modal-title" }, [_vm._v("Widget List")]),
            _c("a", {
              staticClass: "btn-close",
              on: {
                click: function ($event) {
                  return _vm.$bvModal.hide("modalWidgetList")
                },
              },
            }),
          ]),
          _c(
            "div",
            {
              directives: [{ name: "highlight", rawName: "v-highlight" }],
              staticClass: "hljs-wrapper mb-0",
            },
            [
              _c("pre", { staticClass: "mb-0" }, [
                _c(
                  "code",
                  { staticClass: "html", attrs: { id: "source-widget-list" } },
                  [
                    _vm._v(
                      '<!-- begin widget-list -->\n<div class="widget-list rounded mb-4">\n  <!-- begin widget-list-item -->\n  <div class="widget-list-item">\n    <div class="widget-list-media">\n      <img src="/assets/img/user/user-1.jpg" width="50" class="rounded" />\n    </div>\n    <div class="widget-list-content">\n      <h4 class="widget-list-title">Christopher Struth</h4>\n      <p class="widget-list-desc">Bank Transfer</p>\n    </div>\n    <div class="widget-list-action">\n      <b-dropdown variant="none" :no-caret="true" right toggle-class="text-dark text-opacity-50">\n        <template slot="button-content">\n          <i class="fa fa-ellipsis-h fs-14px"></i>\n        </template>\n        <b-dropdown-item>Option 1</b-dropdown-item>\n        ...\n      </b-dropdown>\n    </div>\n  </div>\n  <!-- end widget-list-item -->\n</div>\n<!-- end widget-list -->'
                    ),
                  ]
                ),
              ]),
            ]
          ),
        ],
        2
      ),
      _c(
        "b-modal",
        {
          ref: "modalWidgetListWithIcon",
          attrs: {
            id: "modalWidgetListWithIcon",
            size: "lg",
            title: "",
            "body-class": "p-0",
            "cancel-variant": "default",
          },
        },
        [
          _c("template", { slot: "modal-header" }, [
            _c("h4", { staticClass: "modal-title" }, [
              _vm._v("Widget List with Icon"),
            ]),
            _c("a", {
              staticClass: "btn-close",
              on: {
                click: function ($event) {
                  return _vm.$bvModal.hide("modalWidgetListWithIcon")
                },
              },
            }),
          ]),
          _c(
            "div",
            {
              directives: [{ name: "highlight", rawName: "v-highlight" }],
              staticClass: "hljs-wrapper mb-0",
            },
            [
              _c("pre", { staticClass: "mb-0" }, [
                _c(
                  "code",
                  {
                    staticClass: "html",
                    attrs: { id: "source-widget-list-with-icon" },
                  },
                  [
                    _vm._v(
                      '<!-- begin widget-list -->\n<div class="widget-list rounded">\n  <!-- begin widget-list-item -->\n  <a href="#" class="widget-list-item">\n    <div class="widget-list-media icon">\n      <i class="fa fa-link bg-yellow text-dark"></i>\n    </div>\n    <div class="widget-list-content">\n      <h4 class="widget-list-title">Personal Hotspot</h4>\n    </div>\n    <div class="widget-list-action text-nowrap text-gray-600 fw-bold text-decoration-none">\n      Off\n      <i class="fa fa-angle-right text-gray-500 fa-lg"></i>\n    </div>\n  </a>\n  <!-- end widget-list-item -->\n  ...\n</div>\n<!-- end widget-list -->'
                    ),
                  ]
                ),
              ]),
            ]
          ),
        ],
        2
      ),
      _c(
        "b-modal",
        {
          ref: "modalWidgetImgIcon",
          attrs: {
            id: "modalWidgetImgIcon",
            size: "lg",
            "body-class": "p-0",
            "cancel-variant": "default",
          },
        },
        [
          _c("template", { slot: "modal-header" }, [
            _c("h4", { staticClass: "modal-title" }, [
              _vm._v("Widget Image / Icon"),
            ]),
            _c("a", {
              staticClass: "btn-close",
              on: {
                click: function ($event) {
                  return _vm.$bvModal.hide("modalWidgetImgIcon")
                },
              },
            }),
          ]),
          _c(
            "div",
            {
              directives: [{ name: "highlight", rawName: "v-highlight" }],
              staticClass: "hljs-wrapper mb-0",
            },
            [
              _c("pre", { staticClass: "mb-0" }, [
                _c(
                  "code",
                  {
                    staticClass: "html",
                    attrs: { id: "source-widget-img-icon" },
                  },
                  [
                    _vm._v(
                      '<!-- begin widget-icon -->\n<div class="widget-icon rounded bg-success text-white">\n  <i class="fab fa-android"></i>\n</div>\n<!-- end widget-icon -->\n\n<!-- begin user widget-icon -->\n<div class="widget-icon rounded '
                    ),
                    _c(
                      "span",
                      {
                        staticClass: "hljs-string",
                        attrs: {
                          "data-id": "widget-doc",
                          "data-dark-doc":
                            "bg-inverse text-white-transparent-5",
                          "data-light-doc": "bg-gray-500 text-white",
                        },
                      },
                      [_vm._v("bg-gray-500 text-white")]
                    ),
                    _vm._v(
                      ' user">\n  <i class="fa fa-user"></i>\n</div>\n<!-- end user widget-icon -->\n\n<!-- begin widget-icon-sizes -->\n<div class="widget-icon widget-icon-xl"></div>\n<div class="widget-icon widget-icon-lg"></div>\n<div class="widget-icon"></div>\n<div class="widget-icon widget-icon-sm"></div>\n<div class="widget-icon widget-icon-xs"></div>\n<!-- end widget-icon-sizes -->\n\n<!-- begin widget-img -->\n<div class="widget-img rounded bg-inverse" style="background-image: url(/assets/img/gallery/gallery-11-thumb.jpg)">\n</div>\n<!-- end widget-img -->\n\n<!-- begin widget-img-sizes -->\n<div class="widget-img widget-img-xl"></div>\n<div class="widget-img widget-img-lg"></div>\n<div class="widget-img"></div>\n<div class="widget-img widget-img-sm"></div>\n<div class="widget-img widget-img-xs"></div>\n<!-- end widget-img-sizes -->'
                    ),
                  ]
                ),
              ]),
            ]
          ),
        ],
        2
      ),
      _c(
        "b-modal",
        {
          ref: "modalWidgetCard",
          attrs: {
            id: "modalWidgetCard",
            size: "lg",
            "body-class": "p-0",
            "cancel-variant": "default",
          },
        },
        [
          _c("template", { slot: "modal-header" }, [
            _c("h4", { staticClass: "modal-title" }, [
              _vm._v("Widget List Card"),
            ]),
            _c("a", {
              staticClass: "btn-close",
              on: {
                click: function ($event) {
                  return _vm.$bvModal.hide("modalWidgetCard")
                },
              },
            }),
          ]),
          _c(
            "div",
            {
              directives: [{ name: "highlight", rawName: "v-highlight" }],
              staticClass: "hljs-wrapper mb-0",
            },
            [
              _c("pre", { staticClass: "mb-0" }, [
                _c(
                  "code",
                  { staticClass: "html", attrs: { id: "source-widget-card" } },
                  [
                    _vm._v(
                      '<!-- begin widget-card -->\n<a href="#" class="widget-card rounded">\n  <div class="widget-card-cover rounded" style="background-image: url(/assets/img/gallery/gallery-portrait-11-thumb.jpg)"></div>\n  <div class="widget-card-content">\n    <b class="text-white">Download and get free trial.</b>\n  </div>\n  <div class="widget-card-content bottom">\n    <i class="fab fa-pushed fa-5x text-indigo"></i>\n    <h4 class="text-white mt-10px"><b>Apple Draw<br /> Photo Booth</b></h4>\n    <h5 class="fs-12px text-white text-opacity-75"><b>EASILY DRAW ON PHOTOS</b></h5>\n  </div>\n</a>\n<!-- end widget-card -->'
                    ),
                  ]
                ),
              ]),
            ]
          ),
        ],
        2
      ),
      _c(
        "b-modal",
        {
          ref: "modalWidgetCardSquare",
          attrs: {
            id: "modalWidgetCardSquare",
            size: "lg",
            "body-class": "p-0",
            "cancel-variant": "default",
          },
        },
        [
          _c("template", { slot: "modal-header" }, [
            _c("h4", { staticClass: "modal-title" }, [
              _vm._v("Widget List Card Square"),
            ]),
            _c("a", {
              staticClass: "btn-close",
              on: {
                click: function ($event) {
                  return _vm.$bvModal.hide("modalWidgetCardSquare")
                },
              },
            }),
          ]),
          _c(
            "div",
            {
              directives: [{ name: "highlight", rawName: "v-highlight" }],
              staticClass: "hljs-wrapper mb-0",
            },
            [
              _c("pre", { staticClass: "mb-0" }, [
                _c(
                  "code",
                  {
                    staticClass: "html",
                    attrs: { id: "source-widget-card-square" },
                  },
                  [
                    _vm._v(
                      '<!-- begin widget-card-square -->\n<a href="#" class="widget-card rounded square mb-5px">\n  <div class="widget-card-cover rounded" style="background-image: url(/assets/img/login-bg/login-bg-10.jpg)">\n    <div class="d-flex h-100 align-items-center justify-content-center">\n      <div class="text-center">\n        <div class="text-white fs-14px"><b>PORTRAITS OF</b></div>\n        <div class="text-white-transparent-8 fw-bold">2021</div>\n      </div>\n    </div>\n  </div>\n</a>\n<div class="fs-12px fw-bold text-black pt-2px">Memory 2021</div>\n<div class="fs-10px fw-bold text-black-lighter mb-15px">1,239</div>\n<!-- end widget-card-square -->'
                    ),
                  ]
                ),
              ]),
            ]
          ),
        ],
        2
      ),
      _c(
        "b-modal",
        {
          ref: "modalWidgetStat",
          attrs: {
            id: "modalWidgetStat",
            size: "lg",
            "body-class": "p-0",
            "cancel-variant": "default",
          },
        },
        [
          _c("template", { slot: "modal-header" }, [
            _c("h4", { staticClass: "modal-title" }, [_vm._v("Widget Stat")]),
            _c("a", {
              staticClass: "btn-close",
              on: {
                click: function ($event) {
                  return _vm.$bvModal.hide("modalWidgetStat")
                },
              },
            }),
          ]),
          _c(
            "div",
            {
              directives: [{ name: "highlight", rawName: "v-highlight" }],
              staticClass: "hljs-wrapper mb-0",
            },
            [
              _c("pre", { staticClass: "mb-0" }, [
                _c(
                  "code",
                  { staticClass: "html", attrs: { id: "source-widget-stat" } },
                  [
                    _vm._v(
                      '<!-- begin widget-stats -->\n<div class="widget widget-stats bg-teal mb-10px">\n  <div class="stats-icon stats-icon-lg"><i class="fa fa-globe fa-fw"></i></div>\n  <div class="stats-content">\n    <div class="stats-title">TODAY\'S VISITS</div>\n    <div class="stats-number">7,842,900</div>\n    <div class="stats-progress progress">\n      <div class="progress-bar" style="width: 70.1%;"></div>\n    </div>\n    <div class="stats-desc">Better than last week (70.1%)</div>\n  </div>\n</div>\n<!-- end widget-stats -->'
                    ),
                  ]
                ),
              ]),
            ]
          ),
        ],
        2
      ),
      _c(
        "b-modal",
        {
          ref: "modalWidgetChart",
          attrs: {
            id: "modalWidgetChart",
            size: "lg",
            "body-class": "p-0",
            "cancel-variant": "default",
          },
        },
        [
          _c("template", { slot: "modal-header" }, [
            _c("h4", { staticClass: "modal-title" }, [_vm._v("Widget Chart")]),
            _c("a", {
              staticClass: "btn-close",
              on: {
                click: function ($event) {
                  return _vm.$bvModal.hide("modalWidgetChart")
                },
              },
            }),
          ]),
          _c(
            "div",
            {
              directives: [{ name: "highlight", rawName: "v-highlight" }],
              staticClass: "hljs-wrapper mb-0",
            },
            [
              _c("pre", { staticClass: "mb-0" }, [
                _c(
                  "code",
                  { staticClass: "html", attrs: { id: "source-widget-chart" } },
                  [
                    _vm._v(
                      '<!-- begin widget-chart -->\n<div class="widget rounded">\n  <div class="widget-header">\n    <h4 class="widget-header-title">Audience Overview</h4>\n    <div class="widget-header-icon"><a href="#" class="text-gray-500"><i class="fa fa-fw fa-upload"></i></a></div>\n    <div class="widget-header-icon"><a href="#" class="text-gray-500"><i class="fa fa-fw fa-cog"></i></a></div>\n  </div>\n  <div class="d-flex">\n    <div class="flex-1 widget-chart-content">\n      <div id="nv-stacked-area-chart" style="height: 108%"></div>\n    </div>\n    <div class="p-3" style="width: 30%;">\n      <div class="widget-chart-info">\n        <h4 class="widget-chart-info-title">Total sales</h4>\n        <p class="widget-chart-info-desc">Lorem ipsum dolor sit consectetur adipiscing elit.</p>\n        <div class="widget-chart-info-progress">\n          <b>Monthly Plan</b>\n          <span class="float-end">70%</span>\n        </div>\n        <div class="progress h-10px">\n          <div class="progress-bar progress-bar-striped progress-bar-animated rounded-pill" style="width:70%;"></div>\n        </div>\n      </div>\n      <hr />\n      <div class="widget-chart-info">\n        <h4 class="widget-chart-info-title">Task progress</h4>\n        <p class="widget-chart-info-desc">Vestibulum sollicitudin in lectus a cursus.</p>\n        <div class="widget-chart-info-progress">\n          <b>Marketing Research</b>\n          <span class="float-end">74%</span>\n        </div>\n        <div class="progress h-10px mb-15px">\n          <div class="progress-bar progress-bar-striped progress-bar-animated rounded-pill bg-indigo" style="width: 74%"></div>\n        </div>\n        <div class="widget-chart-info-progress">\n          <b>Mobile App Development</b>\n          <span class="float-end">25%</span>\n        </div>\n        <div class="progress h-10px mb-15px">\n          <div class="progress-bar progress-bar-striped progress-bar-animated rounded-pill bg-green" style="width: 25%"></div>\n        </div>\n        <div class="widget-chart-info-progress">\n          <b>Website Redesign</b>\n          <span class="float-end">95%</span>\n        </div>\n        <div class="progress h-10px">\n          <div class="progress-bar progress-bar-striped progress-bar-animated rounded-pill bg-orange" style="width: 95%"></div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n<!-- end widget-chart -->'
                    ),
                  ]
                ),
              ]),
            ]
          ),
        ],
        2
      ),
      _c(
        "b-modal",
        {
          ref: "modalWidgetTable",
          attrs: {
            id: "modalWidgetTable",
            size: "lg",
            "body-class": "p-0",
            "cancel-variant": "default",
          },
        },
        [
          _c("template", { slot: "modal-header" }, [
            _c("h4", { staticClass: "modal-title" }, [_vm._v("Widget Table")]),
            _c("a", {
              staticClass: "btn-close",
              on: {
                click: function ($event) {
                  return _vm.$bvModal.hide("modalWidgetTable")
                },
              },
            }),
          ]),
          _c(
            "div",
            {
              directives: [{ name: "highlight", rawName: "v-highlight" }],
              staticClass: "hljs-wrapper mb-0",
            },
            [
              _c("pre", { staticClass: "mb-0" }, [
                _c(
                  "code",
                  { staticClass: "html", attrs: { id: "source-widget-table" } },
                  [
                    _vm._v(
                      '<!-- begin widget-table -->\n<table class="table table-bordered widget-table widget-table-rounded">\n  <thead>\n    <tr>\n      <th width="1%">Image</th>\n      <th>Product Info</th>\n      <th>Price</th>\n      <th>Qty</th>\n      <th>Total</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>\n        <img src="/assets/img/product/product-6.png" width="100" />\n      </td>\n      <td>\n        <h5>Mavic Pro Combo</h5>\n        <p class="fs-11px text-gray-600 fw-bold mb-3">Portable yet powerful, the Mavic Pro is your personal drone, ready to go with you everywhere.</p>\n        <div class="progress h-10px rounded-pill mb-5px">\n          <div class="progress-bar progress-bar-striped progress-bar-animated bg-orange fs-10px fw-bold" style="width: 30%;">30%</div>\n        </div>\n        <div class="clearfix fs-10px">\n          status: <b class="text-dark">Shipped</b>\n        </div>\n      </td>\n      <td class="text-nowrap">\n        <b class="text-dark">$999</b><br />\n        <small class="text-dark"><del>$1,202</del></small>\n      </td>\n      <td>1</td>\n      <td>999.00</td>\n      <td><a href="#" class="btn '
                    ),
                    _c(
                      "span",
                      {
                        staticClass: "hljs-string",
                        attrs: {
                          "data-id": "widget-doc",
                          "data-dark-doc": "btn-default",
                          "data-light-doc": "btn-inverse",
                        },
                      },
                      [_vm._v("btn-inverse")]
                    ),
                    _vm._v(
                      ' btn-sm w-80px rounded-pill">Edit</a></td>\n    </tr>\n  </tbody>\n</table>\n<!-- end widget-table -->'
                    ),
                  ]
                ),
              ]),
            ]
          ),
        ],
        2
      ),
    ],
    1
  )
}
var staticRenderFns = [
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("ol", { staticClass: "breadcrumb float-xl-end" }, [
      _c("li", { staticClass: "breadcrumb-item" }, [
        _c("a", { attrs: { href: "javascript:;" } }, [_vm._v("Home")]),
      ]),
      _c("li", { staticClass: "breadcrumb-item active" }, [_vm._v("Widgets")]),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("h1", { staticClass: "page-header" }, [
      _vm._v(" Widgets "),
      _c("small", [_vm._v("header small text goes here...")]),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("p", { staticClass: "mb-20px" }, [
      _vm._v(
        " All the widgets is reusable and responsive. You may use the predefined css to configure the padding, margin or background. Besides that, all the widgets have light and dark version. Kindly add the "
      ),
      _c("code", [_vm._v(".dark-mode")]),
      _vm._v(" to the widget will change it to the dark version. "),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "widget-list-media" }, [
      _c("img", {
        staticClass: "rounded",
        attrs: { src: "/assets/img/user/user-12.jpg", width: "50", alt: "" },
      }),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "widget-list-content" }, [
      _c("h4", { staticClass: "widget-list-title" }, [
        _vm._v("Christopher Struth"),
      ]),
      _c("p", { staticClass: "widget-list-desc" }, [_vm._v("Bank Transfer")]),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "widget-list-media" }, [
      _c("img", {
        staticClass: "rounded",
        attrs: { src: "/assets/img/user/user-13.jpg", width: "50", alt: "" },
      }),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "widget-list-content" }, [
      _c("h4", { staticClass: "widget-list-title" }, [_vm._v("Janie Flowers")]),
      _c("p", { staticClass: "widget-list-desc" }, [_vm._v("Bank Transfer")]),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "widget-list-media" }, [
      _c("img", {
        staticClass: "rounded",
        attrs: { src: "/assets/img/user/user-14.jpg", width: "50", alt: "" },
      }),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "widget-list-content" }, [
      _c("h4", { staticClass: "widget-list-title" }, [_vm._v("Janie Flowers")]),
      _c("p", { staticClass: "widget-list-desc" }, [_vm._v("Bank Transfer")]),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "a",
      { staticClass: "widget-list-item", attrs: { href: "javascript:;" } },
      [
        _c("div", { staticClass: "widget-list-media icon" }, [
          _c("i", { staticClass: "fa fa-plane bg-inverse text-white" }),
        ]),
        _c("div", { staticClass: "widget-list-content" }, [
          _c("h4", { staticClass: "widget-list-title" }, [
            _vm._v("Airplane Mode"),
          ]),
        ]),
        _c("div", { staticClass: "widget-list-action text-end" }, [
          _c("i", { staticClass: "fa fa-angle-right fa-lg text-gray-500" }),
        ]),
      ]
    )
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "a",
      { staticClass: "widget-list-item", attrs: { href: "javascript:;" } },
      [
        _c("div", { staticClass: "widget-list-media icon" }, [
          _c("i", { staticClass: "fa fa-wifi bg-inverse text-white" }),
        ]),
        _c("div", { staticClass: "widget-list-content" }, [
          _c("h4", { staticClass: "widget-list-title" }, [_vm._v("Wi-Fi")]),
        ]),
        _c(
          "div",
          {
            staticClass:
              "widget-list-action text-nowrap text-gray-600 fw-bold text-decoration-none",
          },
          [
            _vm._v(" Connected "),
            _c("i", {
              staticClass: "fa fa-angle-right fa-lg ms-3 text-gray-500",
            }),
          ]
        ),
      ]
    )
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "a",
      { staticClass: "widget-list-item", attrs: { href: "javascript:;" } },
      [
        _c("div", { staticClass: "widget-list-media icon" }, [
          _c("i", { staticClass: "fab fa-bluetooth bg-indigo text-white" }),
        ]),
        _c("div", { staticClass: "widget-list-content" }, [
          _c("h4", { staticClass: "widget-list-title" }, [_vm._v("Bluetooth")]),
        ]),
        _c(
          "div",
          {
            staticClass:
              "widget-list-action text-nowrap text-gray-600 fw-bold text-decoration-none",
          },
          [
            _vm._v(" On "),
            _c("i", {
              staticClass: "fa fa-angle-right text-gray-500 fa-lg ms-3",
            }),
          ]
        ),
      ]
    )
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "a",
      { staticClass: "widget-list-item", attrs: { href: "javascript:;" } },
      [
        _c("div", { staticClass: "widget-list-media icon" }, [
          _c("i", { staticClass: "fa fa-signal bg-pink text-white" }),
        ]),
        _c("div", { staticClass: "widget-list-content" }, [
          _c("h4", { staticClass: "widget-list-title" }, [_vm._v("Cellular")]),
        ]),
        _c(
          "div",
          { staticClass: "widget-list-action text-decoration-none fw-bold" },
          [_c("i", { staticClass: "fa fa-angle-right text-gray-500 fa-lg" })]
        ),
      ]
    )
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "a",
      { staticClass: "widget-list-item", attrs: { href: "javascript:;" } },
      [
        _c("div", { staticClass: "widget-list-media icon" }, [
          _c("i", { staticClass: "fa fa-link bg-yellow text-dark" }),
        ]),
        _c("div", { staticClass: "widget-list-content" }, [
          _c("h4", { staticClass: "widget-list-title" }, [
            _vm._v("Personal Hotspot"),
          ]),
        ]),
        _c(
          "div",
          {
            staticClass:
              "widget-list-action text-nowrap text-gray-600 fw-bold text-decoration-none",
          },
          [
            _vm._v(" Off "),
            _c("i", {
              staticClass: "fa fa-angle-right text-gray-500 fa-lg ms-3",
            }),
          ]
        ),
      ]
    )
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "widget-chat-header" }, [
      _c("div", { staticClass: "widget-chat-header-icon" }, [
        _c("i", {
          staticClass:
            "fab fa-earlybirds w-30px h-30px fs-20px bg-yellow text-dark d-flex align-items-center justify-content-center rounded",
        }),
      ]),
      _c("div", { staticClass: "widget-chat-header-content" }, [
        _c("h4", { staticClass: "widget-chat-header-title" }, [
          _vm._v("Company Discussion Group"),
        ]),
        _c("p", { staticClass: "widget-chat-header-desc" }, [
          _vm._v("55 members, 4 online"),
        ]),
      ]),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "widget-input" }, [
      _c("form", { attrs: { action: "", method: "POST", name: "" } }, [
        _c("div", { staticClass: "widget-input-container" }, [
          _c("div", { staticClass: "widget-input-icon" }, [
            _c(
              "a",
              { staticClass: "text-gray-500", attrs: { href: "javascript:;" } },
              [_c("i", { staticClass: "fa fa-camera" })]
            ),
          ]),
          _c("div", { staticClass: "widget-input-box" }, [
            _c("input", {
              staticClass: "form-control",
              attrs: { type: "text", placeholder: "Write a message..." },
            }),
          ]),
          _c("div", { staticClass: "widget-input-icon" }, [
            _c(
              "a",
              { staticClass: "text-gray-500", attrs: { href: "javascript:;" } },
              [_c("i", { staticClass: "fa fa-smile" })]
            ),
          ]),
          _c("div", { staticClass: "widget-input-divider" }),
          _c("div", { staticClass: "widget-input-icon" }, [
            _c(
              "a",
              { staticClass: "text-gray-500", attrs: { href: "javascript:;" } },
              [_c("i", { staticClass: "fa fa-microphone" })]
            ),
          ]),
        ]),
      ]),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "widget-todolist-header" }, [
      _c("div", { staticClass: "widget-todolist-header-title" }, [
        _vm._v("Todolist"),
      ]),
      _c("div", { staticClass: "widget-todolist-header-total" }, [
        _c("span", [_vm._v("0")]),
        _c("small", [_vm._v("Done")]),
      ]),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "widget-todolist-body" }, [
      _c("div", { staticClass: "widget-todolist-item" }, [
        _c("div", { staticClass: "widget-todolist-input" }, [
          _c("div", { staticClass: "form-check" }, [
            _c("input", {
              staticClass: "form-check-input",
              attrs: { type: "checkbox", id: "widget_todolist_1" },
            }),
          ]),
        ]),
        _c("div", { staticClass: "widget-todolist-content" }, [
          _c("h6", { staticClass: "mb-2px" }, [
            _vm._v("Borrow Tony's travel guide"),
          ]),
          _c("div", { staticClass: "text-gray-500 fw-bold fs-11px" }, [
            _vm._v("Vacation in Rome"),
          ]),
        ]),
        _c("div", { staticClass: "widget-todolist-icon" }, [
          _c("a", { attrs: { href: "javascript:;" } }, [
            _c("i", { staticClass: "fa fa-question-circle" }),
          ]),
        ]),
      ]),
      _c("div", { staticClass: "widget-todolist-item" }, [
        _c("div", { staticClass: "widget-todolist-input" }, [
          _c("div", { staticClass: "form-check" }, [
            _c("input", {
              staticClass: "form-check-input",
              attrs: { type: "checkbox", id: "widget_todolist_2" },
            }),
          ]),
        ]),
        _c("div", { staticClass: "widget-todolist-content" }, [
          _c("h6", { staticClass: "mb-2px" }, [
            _vm._v("Finish expense report"),
          ]),
          _c("div", { staticClass: "text-gray-500 fw-bold fs-11px" }, [
            _vm._v("Today, 4:00PM, Daily"),
          ]),
        ]),
        _c("div", { staticClass: "widget-todolist-icon" }, [
          _c("a", { attrs: { href: "javascript:;" } }, [
            _c("i", { staticClass: "fa fa-question-circle" }),
          ]),
        ]),
      ]),
      _c("div", { staticClass: "widget-todolist-item" }, [
        _c("div", { staticClass: "widget-todolist-input" }, [
          _c("div", { staticClass: "form-check" }, [
            _c("input", {
              staticClass: "form-check-input",
              attrs: { type: "checkbox", id: "widget_todolist_3" },
            }),
          ]),
        ]),
        _c("div", { staticClass: "widget-todolist-content" }, [
          _c("h6", { staticClass: "mb-2px" }, [
            _vm._v("Confirm conference call for Wednesday"),
          ]),
          _c("div", { staticClass: "text-gray-500 fw-bold fs-11px" }, [
            _vm._v("Work"),
          ]),
        ]),
        _c("div", { staticClass: "widget-todolist-icon" }, [
          _c("a", { attrs: { href: "javascript:;" } }, [
            _c("i", { staticClass: "fa fa-question-circle" }),
          ]),
        ]),
      ]),
      _c("div", { staticClass: "widget-todolist-item" }, [
        _c("div", { staticClass: "widget-todolist-input" }, [
          _c("div", { staticClass: "form-check" }, [
            _c("input", {
              staticClass: "form-check-input",
              attrs: { type: "checkbox", id: "widget_todolist_4" },
            }),
          ]),
        ]),
        _c("div", { staticClass: "widget-todolist-content" }, [
          _c("h6", { staticClass: "mb-2px" }, [
            _c("b", { staticClass: "text-warning" }, [_vm._v("!!")]),
            _vm._v(" Mobile App WIP Presentation"),
          ]),
          _c("div", { staticClass: "text-gray-500 fw-bold fs-11px" }, [
            _vm._v("Today, 12:00PM"),
          ]),
        ]),
        _c("div", { staticClass: "widget-todolist-icon" }, [
          _c("a", { attrs: { href: "javascript:;" } }, [
            _c("i", { staticClass: "fa fa-question-circle" }),
          ]),
        ]),
      ]),
      _c("div", { staticClass: "widget-todolist-item" }, [
        _c("div", { staticClass: "widget-todolist-input" }, [
          _c("i", { staticClass: "fa fa-plus text-gray-500 fa-fw" }),
        ]),
        _c("div", { staticClass: "widget-todolist-content" }, [
          _c("input", {
            staticClass:
              "form-control border-0 shadow-none rounded-0 p-0 h-20px bg-none",
            attrs: { type: "text", placeholder: "Write your task here..." },
          }),
        ]),
      ]),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "widget-input-container" }, [
      _c("div", { staticClass: "widget-input-icon" }, [
        _c(
          "a",
          {
            staticClass: "text-gray-500",
            attrs: {
              href: "javascript:;",
              "data-id": "widget-elm",
              "data-light-class": "text-gray-500",
              "data-dark-class": "text-white",
            },
          },
          [_c("i", { staticClass: "fa fa-ellipsis-v" })]
        ),
      ]),
      _c("div", { staticClass: "widget-input-box" }, [
        _c("input", {
          staticClass: "form-control",
          attrs: { type: "text", placeholder: "Search here" },
        }),
      ]),
      _c("div", { staticClass: "widget-input-icon" }, [
        _c(
          "a",
          {
            staticClass: "text-gray-500",
            attrs: {
              href: "javascript:;",
              "data-id": "widget-elm",
              "data-light-class": "text-gray-500",
              "data-dark-class": "text-white",
            },
          },
          [_c("i", { staticClass: "fa fa-microphone" })]
        ),
      ]),
      _c("div", { staticClass: "widget-input-divider" }),
      _c("div", { staticClass: "widget-input-icon" }, [
        _c(
          "a",
          {
            staticClass: "text-gray-500",
            attrs: {
              href: "javascript:;",
              "data-id": "widget-elm",
              "data-light-class": "text-gray-500",
              "data-dark-class": "text-white",
            },
          },
          [_c("i", { staticClass: "fa fa-location-arrow" })]
        ),
      ]),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "widget-map-body" }, [
      _c("iframe", {
        staticClass: "d-block",
        staticStyle: { border: "0" },
        attrs: {
          src: "https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3153.5650178360584!2d-122.41879278478642!3d37.77679637975903!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x8085809c6c8f4459%3A0xb10ed6d9b5050fa5!2sTwitter+HQ!5e0!3m2!1sen!2smy!4v1524046379645",
          width: "100%",
          height: "230",
          frameborder: "0",
          allowfullscreen: "",
        },
      }),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "widget-list bg-none" }, [
      _c("div", { staticClass: "widget-list-item" }, [
        _c("div", { staticClass: "widget-list-media text-center" }, [
          _c("a", { attrs: { href: "javascript:;" } }, [
            _c("i", { staticClass: "fab fa-twitter fa-3x" }),
          ]),
        ]),
        _c("div", { staticClass: "widget-list-content" }, [
          _c("h4", { staticClass: "widget-list-title" }, [
            _vm._v("Twitter Headquater"),
          ]),
          _c("p", { staticClass: "widget-list-desc" }, [
            _vm._v("Corporate Office"),
          ]),
        ]),
        _c("div", { staticClass: "widget-list-action" }, [
          _c(
            "a",
            { staticClass: "text-gray-500", attrs: { href: "javascript:;" } },
            [_c("i", { staticClass: "fa fa-angle-right fa-2x" })]
          ),
        ]),
      ]),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "d-flex flex-wrap" }, [
      _c(
        "div",
        {
          staticClass: "widget-icon rounded bg-indigo me-5px mb-5px text-white",
        },
        [_c("i", { staticClass: "fab fa-digital-ocean" })]
      ),
      _c(
        "div",
        { staticClass: "widget-icon rounded bg-blue me-5px mb-5px text-white" },
        [_c("i", { staticClass: "fab fa-twitter" })]
      ),
      _c(
        "div",
        {
          staticClass:
            "widget-icon rounded bg-success me-5px mb-5px text-white",
        },
        [_c("i", { staticClass: "fab fa-android" })]
      ),
      _c(
        "div",
        {
          staticClass:
            "widget-icon rounded bg-warning me-5px mb-5px text-white",
        },
        [_c("i", { staticClass: "fab fa-firefox" })]
      ),
      _c(
        "div",
        {
          staticClass: "widget-icon rounded bg-danger me-5px mb-5px text-white",
        },
        [_c("i", { staticClass: "fab fa-google-plus-g" })]
      ),
      _c(
        "div",
        { staticClass: "widget-icon rounded bg-pink me-5px mb-5px text-white" },
        [_c("i", { staticClass: "fab fa-pinterest" })]
      ),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "col-sm-6" }, [
      _c("div", { staticClass: "float-start" }, [
        _c("div", {
          staticClass:
            "widget-img rounded bg-inverse float-start me-5px mb-5px",
          staticStyle: {
            "background-image": "url(/assets/img/gallery/gallery-11-thumb.jpg)",
          },
        }),
        _c("div", {
          staticClass:
            "widget-img rounded bg-inverse float-start me-5px mb-5px",
          staticStyle: {
            "background-image": "url(/assets/img/gallery/gallery-12-thumb.jpg)",
          },
        }),
        _c("div", {
          staticClass:
            "widget-img rounded bg-inverse float-start me-5px mb-5px",
          staticStyle: {
            "background-image": "url(/assets/img/gallery/gallery-13-thumb.jpg)",
          },
        }),
        _c("div", {
          staticClass:
            "widget-img rounded bg-inverse float-start me-5px mb-5px",
          staticStyle: {
            "background-image": "url(/assets/img/gallery/gallery-14-thumb.jpg)",
          },
        }),
        _c("div", {
          staticClass:
            "widget-img rounded bg-inverse float-start me-5px mb-5px",
          staticStyle: {
            "background-image": "url(/assets/img/gallery/gallery-15-thumb.jpg)",
          },
        }),
        _c("div", {
          staticClass:
            "widget-img rounded bg-inverse float-start me-5px mb-5px",
          staticStyle: {
            "background-image": "url(/assets/img/gallery/gallery-16-thumb.jpg)",
          },
        }),
        _c("br"),
        _c("div", {
          staticClass:
            "widget-img widget-img-xl rounded bg-inverse float-start me-5px mb-5px",
          staticStyle: {
            "background-image": "url(/assets/img/gallery/gallery-21-thumb.jpg)",
          },
        }),
        _c("div", {
          staticClass:
            "widget-img widget-img-lg rounded bg-inverse float-start me-5px mb-5px",
          staticStyle: {
            "background-image": "url(/assets/img/gallery/gallery-22-thumb.jpg)",
          },
        }),
        _c("div", {
          staticClass:
            "widget-img widget-img rounded bg-inverse float-start me-5px mb-5px",
          staticStyle: {
            "background-image": "url(/assets/img/gallery/gallery-23-thumb.jpg)",
          },
        }),
        _c("div", {
          staticClass:
            "widget-img widget-img-sm rounded bg-inverse float-start me-5px mb-5px",
          staticStyle: {
            "background-image": "url(/assets/img/gallery/gallery-24-thumb.jpg)",
          },
        }),
        _c("div", {
          staticClass:
            "widget-img widget-img-xs rounded bg-inverse float-start me-5px mb-5px",
          staticStyle: {
            "background-image": "url(/assets/img/gallery/gallery-25-thumb.jpg)",
          },
        }),
      ]),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "widget-card-content" }, [
      _c("b", { staticClass: "text-white" }, [
        _vm._v("Download and get free trial."),
      ]),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "widget-card-content bottom" }, [
      _c("i", { staticClass: "fab fa-pushed fa-5x text-indigo" }),
      _c("h4", { staticClass: "text-white mt-10px" }, [
        _c("b", [_vm._v("Apple Draw"), _c("br"), _vm._v(" Photo Booth")]),
      ]),
      _c("h5", { staticClass: "fs-12px text-white text-opacity-75 mb-0" }, [
        _c("b", [_vm._v("EASILY DRAW ON PHOTOS")]),
      ]),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("h4", { staticClass: "mb-10px text-pink" }, [
      _c("b", [_vm._v("Apple Heart"), _c("br"), _vm._v(" Study App")]),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "row" }, [
      _c("div", { staticClass: "col-xs-6 col-sm-3" }, [
        _c("div", { staticClass: "row gx-1 mb-1" }, [
          _c("div", { staticClass: "col-6" }, [
            _c(
              "a",
              {
                staticClass: "widget-card rounded square mb-1",
                attrs: { href: "javascript:;" },
              },
              [
                _c("div", {
                  staticClass: "widget-card-cover",
                  staticStyle: {
                    "background-image":
                      "url(/assets/img/login-bg/login-bg-1-thumb.jpg)",
                  },
                }),
              ]
            ),
            _c(
              "a",
              {
                staticClass: "widget-card rounded square mb-1",
                attrs: { href: "javascript:;" },
              },
              [
                _c("div", {
                  staticClass: "widget-card-cover",
                  staticStyle: {
                    "background-image":
                      "url(/assets/img/login-bg/login-bg-2-thumb.jpg)",
                  },
                }),
              ]
            ),
          ]),
          _c("div", { staticClass: "col-6" }, [
            _c(
              "a",
              {
                staticClass: "widget-card rounded square mb-1",
                attrs: { href: "javascript:;" },
              },
              [
                _c("div", {
                  staticClass: "widget-card-cover",
                  staticStyle: {
                    "background-image":
                      "url(/assets/img/login-bg/login-bg-3-thumb.jpg)",
                  },
                }),
              ]
            ),
            _c(
              "a",
              {
                staticClass: "widget-card rounded square mb-1",
                attrs: { href: "javascript:;" },
              },
              [
                _c("div", {
                  staticClass: "widget-card-cover",
                  staticStyle: {
                    "background-image":
                      "url(/assets/img/login-bg/login-bg-4-thumb.jpg)",
                  },
                }),
              ]
            ),
          ]),
        ]),
        _c("div", { staticClass: "fs-12px fw-bold text-black" }, [
          _vm._v("Camera Roll"),
        ]),
        _c("div", { staticClass: "fs-10px fw-bold text-black-lighter mb-3" }, [
          _vm._v("2,711"),
        ]),
      ]),
      _c("div", { staticClass: "col-xs-6 col-sm-3" }, [
        _c(
          "a",
          {
            staticClass: "widget-card rounded square mb-5px",
            attrs: { href: "javascript:;" },
          },
          [
            _c(
              "div",
              {
                staticClass: "widget-card-cover",
                staticStyle: {
                  "background-image":
                    "url(/assets/img/login-bg/login-bg-7-thumb.jpg)",
                },
              },
              [
                _c("span", { staticClass: "widget-card-cover-icon" }, [
                  _c("i", { staticClass: "fa fa-play fa-lg" }),
                ]),
              ]
            ),
          ]
        ),
        _c("div", { staticClass: "fs-12px fw-bold text-black pt-2px" }, [
          _vm._v("Videos"),
        ]),
        _c("div", { staticClass: "fs-10px fw-bold text-black-lighter mb-3" }, [
          _vm._v("31"),
        ]),
      ]),
      _c("div", { staticClass: "col-xs-6 col-sm-3" }, [
        _c(
          "a",
          {
            staticClass: "widget-card rounded square mb-5px",
            attrs: { href: "javascript:;" },
          },
          [
            _c(
              "div",
              {
                staticClass: "widget-card-cover",
                staticStyle: {
                  "background-image":
                    "url(/assets/img/login-bg/login-bg-10-thumb.jpg)",
                },
              },
              [
                _c(
                  "div",
                  {
                    staticClass:
                      "d-flex h-100 align-items-center justify-content-center",
                  },
                  [
                    _c("div", { staticClass: "text-center" }, [
                      _c("div", { staticClass: "text-white fs-14px" }, [
                        _c("b", [_vm._v("PORTRAITS OF")]),
                      ]),
                      _c(
                        "div",
                        { staticClass: "text-white-transparent-8 fw-bold" },
                        [_vm._v("2021")]
                      ),
                    ]),
                  ]
                ),
              ]
            ),
          ]
        ),
        _c("div", { staticClass: "fs-12px fw-bold text-black pt-2px" }, [
          _vm._v("Memory 2021"),
        ]),
        _c("div", { staticClass: "fs-10px fw-bold text-black-lighter mb-3" }, [
          _vm._v("1,239"),
        ]),
      ]),
      _c("div", { staticClass: "col-xs-6 col-sm-3" }, [
        _c("div", { staticClass: "row gx-1 mb-5px" }, [
          _c("div", { staticClass: "col-3" }, [
            _c(
              "a",
              {
                staticClass: "widget-card rounded square mb-1",
                attrs: { href: "javascript:;" },
              },
              [
                _c("div", {
                  staticClass: "widget-card-cover",
                  staticStyle: {
                    "background-image":
                      "url(/assets/img/gallery/gallery-1-thumb.jpg)",
                  },
                }),
              ]
            ),
            _c(
              "a",
              {
                staticClass: "widget-card rounded square mb-1",
                attrs: { href: "javascript:;" },
              },
              [
                _c("div", {
                  staticClass: "widget-card-cover",
                  staticStyle: {
                    "background-image":
                      "url(/assets/img/gallery/gallery-2-thumb.jpg)",
                  },
                }),
              ]
            ),
            _c(
              "a",
              {
                staticClass: "widget-card rounded square mb-1",
                attrs: { href: "javascript:;" },
              },
              [
                _c("div", {
                  staticClass: "widget-card-cover",
                  staticStyle: {
                    "background-image":
                      "url(/assets/img/gallery/gallery-3-thumb.jpg)",
                  },
                }),
              ]
            ),
            _c(
              "a",
              {
                staticClass: "widget-card rounded square mb-1",
                attrs: { href: "javascript:;" },
              },
              [
                _c("div", {
                  staticClass: "widget-card-cover",
                  staticStyle: {
                    "background-image":
                      "url(/assets/img/gallery/gallery-4-thumb.jpg)",
                  },
                }),
              ]
            ),
          ]),
          _c("div", { staticClass: "col-3" }, [
            _c(
              "a",
              {
                staticClass: "widget-card rounded square mb-1",
                attrs: { href: "javascript:;" },
              },
              [
                _c("div", {
                  staticClass: "widget-card-cover",
                  staticStyle: {
                    "background-image":
                      "url(/assets/img/gallery/gallery-5-thumb.jpg)",
                  },
                }),
              ]
            ),
            _c(
              "a",
              {
                staticClass: "widget-card rounded square mb-1",
                attrs: { href: "javascript:;" },
              },
              [
                _c("div", {
                  staticClass: "widget-card-cover",
                  staticStyle: {
                    "background-image":
                      "url(/assets/img/gallery/gallery-6-thumb.jpg)",
                  },
                }),
              ]
            ),
            _c(
              "a",
              {
                staticClass: "widget-card rounded square mb-1",
                attrs: { href: "javascript:;" },
              },
              [
                _c("div", {
                  staticClass: "widget-card-cover",
                  staticStyle: {
                    "background-image":
                      "url(/assets/img/gallery/gallery-7-thumb.jpg)",
                  },
                }),
              ]
            ),
            _c(
              "a",
              {
                staticClass: "widget-card rounded square mb-1",
                attrs: { href: "javascript:;" },
              },
              [
                _c("div", {
                  staticClass: "widget-card-cover",
                  staticStyle: {
                    "background-image":
                      "url(/assets/img/gallery/gallery-8-thumb.jpg)",
                  },
                }),
              ]
            ),
          ]),
          _c("div", { staticClass: "col-3" }, [
            _c(
              "a",
              {
                staticClass: "widget-card rounded square mb-1",
                attrs: { href: "javascript:;" },
              },
              [
                _c("div", {
                  staticClass: "widget-card-cover",
                  staticStyle: {
                    "background-image":
                      "url(/assets/img/gallery/gallery-9-thumb.jpg)",
                  },
                }),
              ]
            ),
            _c(
              "a",
              {
                staticClass: "widget-card rounded square mb-1",
                attrs: { href: "javascript:;" },
              },
              [
                _c("div", {
                  staticClass: "widget-card-cover",
                  staticStyle: {
                    "background-image":
                      "url(/assets/img/gallery/gallery-10-thumb.jpg)",
                  },
                }),
              ]
            ),
            _c(
              "a",
              {
                staticClass: "widget-card rounded square mb-1",
                attrs: { href: "javascript:;" },
              },
              [
                _c("div", {
                  staticClass: "widget-card-cover",
                  staticStyle: {
                    "background-image":
                      "url(/assets/img/gallery/gallery-11-thumb.jpg)",
                  },
                }),
              ]
            ),
            _c(
              "a",
              {
                staticClass: "widget-card rounded square mb-1",
                attrs: { href: "javascript:;" },
              },
              [
                _c("div", {
                  staticClass: "widget-card-cover",
                  staticStyle: {
                    "background-image":
                      "url(/assets/img/gallery/gallery-12-thumb.jpg)",
                  },
                }),
              ]
            ),
          ]),
          _c("div", { staticClass: "col-3" }, [
            _c(
              "a",
              {
                staticClass: "widget-card rounded square mb-1",
                attrs: { href: "javascript:;" },
              },
              [
                _c("div", {
                  staticClass: "widget-card-cover",
                  staticStyle: {
                    "background-image":
                      "url(/assets/img/gallery/gallery-13-thumb.jpg)",
                  },
                }),
              ]
            ),
            _c(
              "a",
              {
                staticClass: "widget-card rounded square mb-1",
                attrs: { href: "javascript:;" },
              },
              [
                _c("div", {
                  staticClass: "widget-card-cover",
                  staticStyle: {
                    "background-image":
                      "url(/assets/img/gallery/gallery-14-thumb.jpg)",
                  },
                }),
              ]
            ),
            _c(
              "a",
              {
                staticClass: "widget-card rounded square mb-1",
                attrs: { href: "javascript:;" },
              },
              [
                _c("div", {
                  staticClass: "widget-card-cover",
                  staticStyle: {
                    "background-image":
                      "url(/assets/img/gallery/gallery-15-thumb.jpg)",
                  },
                }),
              ]
            ),
            _c(
              "a",
              {
                staticClass: "widget-card rounded square mb-1",
                attrs: { href: "javascript:;" },
              },
              [
                _c("div", {
                  staticClass: "widget-card-cover",
                  staticStyle: {
                    "background-image":
                      "url(/assets/img/gallery/gallery-16-thumb.jpg)",
                  },
                }),
              ]
            ),
          ]),
        ]),
        _c("div", { staticClass: "fs-12px fw-bold text-black" }, [
          _vm._v("Albums"),
        ]),
        _c(
          "div",
          { staticClass: "fs-10px fw-bold text-black-lighter mb-15px" },
          [_vm._v("8")]
        ),
      ]),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "row gx-2 mb-20px" }, [
      _c("div", { staticClass: "col-lg-4 col-sm-6" }, [
        _c("div", { staticClass: "widget widget-stats bg-teal mb-7px" }, [
          _c("div", { staticClass: "stats-icon stats-icon-lg" }, [
            _c("i", { staticClass: "fa fa-globe fa-fw" }),
          ]),
          _c("div", { staticClass: "stats-content" }, [
            _c("div", { staticClass: "stats-title" }, [
              _vm._v("TODAY'S VISITS"),
            ]),
            _c("div", { staticClass: "stats-number" }, [_vm._v("7,842,900")]),
            _c("div", { staticClass: "stats-progress progress" }, [
              _c("div", {
                staticClass: "progress-bar",
                staticStyle: { width: "70.1%" },
              }),
            ]),
            _c("div", { staticClass: "stats-desc" }, [
              _vm._v("Better than last week (70.1%)"),
            ]),
          ]),
        ]),
      ]),
      _c("div", { staticClass: "col-lg-4 col-sm-6" }, [
        _c("div", { staticClass: "widget widget-stats bg-blue mb-7px" }, [
          _c("div", { staticClass: "stats-icon stats-icon-lg" }, [
            _c("i", { staticClass: "fa fa-dollar-sign fa-fw" }),
          ]),
          _c("div", { staticClass: "stats-content" }, [
            _c("div", { staticClass: "stats-title" }, [
              _vm._v("TODAY'S PROFIT"),
            ]),
            _c("div", { staticClass: "stats-number" }, [_vm._v("180,200")]),
            _c("div", { staticClass: "stats-progress progress" }, [
              _c("div", {
                staticClass: "progress-bar",
                staticStyle: { width: "40.5%" },
              }),
            ]),
            _c("div", { staticClass: "stats-desc" }, [
              _vm._v("Better than last week (40.5%)"),
            ]),
          ]),
        ]),
      ]),
      _c("div", { staticClass: "col-lg-4 col-sm-6" }, [
        _c("div", { staticClass: "widget widget-stats bg-purple mb-7px" }, [
          _c("div", { staticClass: "stats-icon stats-icon-lg" }, [
            _c("i", { staticClass: "fa fa-archive fa-fw" }),
          ]),
          _c("div", { staticClass: "stats-content" }, [
            _c("div", { staticClass: "stats-title" }, [_vm._v("NEW ORDERS")]),
            _c("div", { staticClass: "stats-number" }, [_vm._v("38,900")]),
            _c("div", { staticClass: "stats-progress progress" }, [
              _c("div", {
                staticClass: "progress-bar",
                staticStyle: { width: "76.3%" },
              }),
            ]),
            _c("div", { staticClass: "stats-desc" }, [
              _vm._v("Better than last week (76.3%)"),
            ]),
          ]),
        ]),
      ]),
      _c("div", { staticClass: "col-lg-4 col-sm-6" }, [
        _c("div", { staticClass: "widget widget-stats bg-gray-900 mb-7px" }, [
          _c("div", { staticClass: "stats-icon stats-icon-lg" }, [
            _c("i", { staticClass: "fa fa-comment-alt fa-fw" }),
          ]),
          _c("div", { staticClass: "stats-content" }, [
            _c("div", { staticClass: "stats-title" }, [_vm._v("NEW COMMENTS")]),
            _c("div", { staticClass: "stats-number" }, [_vm._v("3,988")]),
            _c("div", { staticClass: "stats-progress progress" }, [
              _c("div", {
                staticClass: "progress-bar",
                staticStyle: { width: "54.9%" },
              }),
            ]),
            _c("div", { staticClass: "stats-desc" }, [
              _vm._v("Better than last week (54.9%)"),
            ]),
          ]),
        ]),
      ]),
      _c("div", { staticClass: "col-lg-4 col-sm-6" }, [
        _c("div", { staticClass: "widget widget-stats bg-orange mb-7px" }, [
          _c("div", { staticClass: "stats-icon stats-icon-lg" }, [
            _c("i", { staticClass: "fa fa-file-alt fa-fw" }),
          ]),
          _c("div", { staticClass: "stats-content" }, [
            _c("div", { staticClass: "stats-title" }, [
              _vm._v("PENDING INVOICE"),
            ]),
            _c("div", { staticClass: "stats-number" }, [_vm._v("20")]),
            _c("div", { staticClass: "stats-progress progress" }, [
              _c("div", {
                staticClass: "progress-bar",
                staticStyle: { width: "23.5%" },
              }),
            ]),
            _c("div", { staticClass: "stats-desc" }, [
              _vm._v("More than last week (23.5%)"),
            ]),
          ]),
        ]),
      ]),
      _c("div", { staticClass: "col-lg-4 col-sm-6" }, [
        _c("div", { staticClass: "widget widget-stats bg-pink mb-7px" }, [
          _c("div", { staticClass: "stats-icon stats-icon-lg" }, [
            _c("i", { staticClass: "fa fa-exclamation-triangle fa-fw" }),
          ]),
          _c("div", { staticClass: "stats-content" }, [
            _c("div", { staticClass: "stats-title" }, [_vm._v("ERROR LOG")]),
            _c("div", { staticClass: "stats-number" }, [_vm._v("5")]),
            _c("div", { staticClass: "stats-progress progress" }, [
              _c("div", {
                staticClass: "progress-bar",
                staticStyle: { width: "10.5%" },
              }),
            ]),
            _c("div", { staticClass: "stats-desc" }, [
              _vm._v("More than last week (10.5%)"),
            ]),
          ]),
        ]),
      ]),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "widget-header" }, [
      _c("h4", { staticClass: "widget-header-title" }, [
        _vm._v("Audience Overview"),
      ]),
      _c("div", { staticClass: "widget-header-icon" }, [
        _c(
          "a",
          { staticClass: "text-gray-500", attrs: { href: "javascript:;" } },
          [_c("i", { staticClass: "fa fa-fw fa-upload" })]
        ),
      ]),
      _c("div", { staticClass: "widget-header-icon" }, [
        _c(
          "a",
          { staticClass: "text-gray-500", attrs: { href: "javascript:;" } },
          [_c("i", { staticClass: "fa fa-fw fa-cog" })]
        ),
      ]),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "col-lg-4 p-3" }, [
      _c("div", { staticClass: "widget-chart-info" }, [
        _c("h4", { staticClass: "widget-chart-info-title" }, [
          _vm._v("Total sales"),
        ]),
        _c("p", { staticClass: "widget-chart-info-desc" }, [
          _vm._v("Lorem ipsum dolor sit consectetur adipiscing elit."),
        ]),
        _c("div", { staticClass: "widget-chart-info-progress" }, [
          _c("b", [_vm._v("Monthly Plan")]),
          _c("span", { staticClass: "float-end" }, [_vm._v("70%")]),
        ]),
        _c("div", { staticClass: "progress h-10px" }, [
          _c("div", {
            staticClass:
              "progress-bar progress-bar-striped progress-bar-animated rounded-pill",
            staticStyle: { width: "70%" },
          }),
        ]),
      ]),
      _c("hr"),
      _c("div", { staticClass: "widget-chart-info" }, [
        _c("h4", { staticClass: "widget-chart-info-title" }, [
          _vm._v("Task progress"),
        ]),
        _c("p", { staticClass: "widget-chart-info-desc" }, [
          _vm._v("Vestibulum sollicitudin in lectus a cursus."),
        ]),
        _c("div", { staticClass: "widget-chart-info-progress" }, [
          _c("b", [_vm._v("Marketing Research")]),
          _c("span", { staticClass: "float-end" }, [_vm._v("74%")]),
        ]),
        _c("div", { staticClass: "progress h-10px mb-15px" }, [
          _c("div", {
            staticClass:
              "progress-bar progress-bar-striped progress-bar-animated rounded-pill bg-indigo",
            staticStyle: { width: "74%" },
          }),
        ]),
        _c("div", { staticClass: "widget-chart-info-progress" }, [
          _c("b", [_vm._v("Mobile App Development")]),
          _c("span", { staticClass: "float-end" }, [_vm._v("25%")]),
        ]),
        _c("div", { staticClass: "progress h-10px mb-15px" }, [
          _c("div", {
            staticClass:
              "progress-bar progress-bar-striped progress-bar-animated rounded-pill bg-green",
            staticStyle: { width: "25%" },
          }),
        ]),
        _c("div", { staticClass: "widget-chart-info-progress" }, [
          _c("b", [_vm._v("Website Redesign")]),
          _c("span", { staticClass: "float-end" }, [_vm._v("95%")]),
        ]),
        _c("div", { staticClass: "progress h-10px" }, [
          _c("div", {
            staticClass:
              "progress-bar progress-bar-striped progress-bar-animated rounded-pill bg-orange",
            staticStyle: { width: "95%" },
          }),
        ]),
      ]),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("thead", [
      _c("tr", { staticClass: "text-nowrap" }, [
        _c("th", { attrs: { width: "1%" } }, [_vm._v("Image")]),
        _c("th", [_vm._v("Product Info")]),
        _c("th", [_vm._v("Price")]),
        _c("th", [_vm._v("Qty")]),
        _c("th", [_vm._v("Total")]),
        _c("th"),
      ]),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("td", [
      _c("img", {
        attrs: { src: "/assets/img/product/product-6.png", width: "100" },
      }),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "progress h-10px rounded-pill mb-5px" }, [
      _c(
        "div",
        {
          staticClass:
            "progress-bar progress-bar-striped progress-bar-animated bg-orange fs-10px fw-bold",
          staticStyle: { width: "30%" },
        },
        [_vm._v("30%")]
      ),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("td", [
      _c("img", {
        attrs: { src: "/assets/img/product/product-7.png", width: "100" },
      }),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "progress h-10px rounded-pill mb-5px" }, [
      _c(
        "div",
        {
          staticClass:
            "progress-bar progress-bar-striped progress-bar-animated bg-success fs-10px fw-bold",
          staticStyle: { width: "100%" },
        },
        [_vm._v("100%")]
      ),
    ])
  },
]
render._withStripped = true

export { render, staticRenderFns }"}]}