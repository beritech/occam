{"remainingRequest":"C:\\Proyectos\\occam\\client\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Proyectos\\occam\\client\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\Proyectos\\occam\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Proyectos\\occam\\client\\src\\pages\\UI-typography.vue?vue&type=template&id=50413b98&","dependencies":[{"path":"C:\\Proyectos\\occam\\client\\src\\pages\\UI-typography.vue","mtime":1636976910000},{"path":"C:\\Proyectos\\occam\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1637785795160},{"path":"C:\\Proyectos\\occam\\client\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1637785799818},{"path":"C:\\Proyectos\\occam\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1637785795160},{"path":"C:\\Proyectos\\occam\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":1637785798326}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}