{"remainingRequest":"C:\\Proyectos\\occam\\client\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Proyectos\\occam\\client\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\Proyectos\\occam\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Proyectos\\occam\\client\\src\\pages\\UI-icons.vue?vue&type=template&id=1d6a3ea5&","dependencies":[{"path":"C:\\Proyectos\\occam\\client\\src\\pages\\UI-icons.vue","mtime":1636978699000},{"path":"C:\\Proyectos\\occam\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1637785795160},{"path":"C:\\Proyectos\\occam\\client\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1637785799818},{"path":"C:\\Proyectos\\occam\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1637785795160},{"path":"C:\\Proyectos\\occam\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":1637785798326}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:var render = function () {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("div", [
    _vm._m(0),
    _vm._m(1),
    _c("div", { staticClass: "row" }, [
      _c(
        "div",
        { staticClass: "col-xl-6" },
        [
          _c("panel", { attrs: { title: "Icon Sizes" } }, [
            _c("div", { staticClass: "alert alert-info rounded-0 mb-0" }, [
              _vm._v(" Font Awesome css has been "),
              _c("b", [_vm._v("compiled")]),
              _vm._v(" into "),
              _c("code", [_vm._v("vendor.min.css")]),
              _vm._v(". As long as you include the "),
              _c("code", [_vm._v("vendor.min.css")]),
              _vm._v(", you should be able to use Font Awesome in your page. "),
            ]),
            _c("div", { staticClass: "text-dark" }, [
              _c("i", { staticClass: "fas me-2 fa-camera-retro fa-xs" }),
              _c("i", { staticClass: "fas me-2 fa-camera-retro fa-sm" }),
              _c("i", { staticClass: "fas me-2 fa-camera-retro fa-lg" }),
              _c("i", { staticClass: "fas me-2 fa-camera-retro fa-2x" }),
              _c("i", { staticClass: "fas me-2 fa-camera-retro fa-3x" }),
              _c("i", { staticClass: "fas me-2 fa-camera-retro fa-5x" }),
              _c("i", { staticClass: "fas me-2 fa-camera-retro fa-7x" }),
              _c("i", { staticClass: "fas me-2 fa-camera-retro fa-10x" }),
            ]),
            _c(
              "div",
              {
                directives: [{ name: "highlight", rawName: "v-highlight" }],
                staticClass: "hljs-wrapper",
                attrs: { slot: "outsideBody" },
                slot: "outsideBody",
              },
              [
                _c("pre", [
                  _c("code", { staticClass: "html" }, [
                    _vm._v(
                      '<i class="fas fa-camera-retro fa-xs"></i>\n<i class="fas fa-camera-retro fa-sm"></i>\n<i class="fas fa-camera-retro fa-lg"></i>\n<i class="fas fa-camera-retro fa-2x"></i>\n<i class="fas fa-camera-retro fa-3x"></i>\n<i class="fas fa-camera-retro fa-5x"></i>\n<i class="fas fa-camera-retro fa-7x"></i>\n<i class="fas fa-camera-retro fa-10x"></i>'
                    ),
                  ]),
                ]),
              ]
            ),
          ]),
          _c("panel", { attrs: { title: "Fixed Width Icons" } }, [
            _c("div", { staticClass: "fs-14px" }, [
              _c("i", { staticClass: "fas fa-home fa-fw" }),
              _vm._v(" Home"),
              _c("br"),
              _c("i", { staticClass: "fas fa-info fa-fw" }),
              _vm._v(" Info"),
              _c("br"),
              _c("i", { staticClass: "fas fa-book fa-fw" }),
              _vm._v(" Library"),
              _c("br"),
              _c("i", { staticClass: "fas fa-pencil-alt fa-fw" }),
              _vm._v(" Applications"),
              _c("br"),
              _c("i", { staticClass: "fas fa-cog fa-fw" }),
              _vm._v(" Settings "),
            ]),
            _c(
              "div",
              {
                directives: [{ name: "highlight", rawName: "v-highlight" }],
                staticClass: "hljs-wrapper",
                attrs: { slot: "outsideBody" },
                slot: "outsideBody",
              },
              [
                _c("pre", [
                  _c("code", { staticClass: "html" }, [
                    _vm._v(
                      '<i class="fas fa-home fa-fw"></i> Home\n<i class="fas fa-info fa-fw"></i> Info\n<i class="fas fa-book fa-fw"></i> Library\n<i class="fas fa-pencil-alt fa-fw"></i> Applications\n<i class="fas fa-cog fa-fw"></i> Settings'
                    ),
                  ]),
                ]),
              ]
            ),
          ]),
          _c("panel", { attrs: { title: "Animated Icons" } }, [
            _c("div", { staticClass: "fa-3x" }, [
              _c("i", { staticClass: "fas me-2 fa-spinner fa-spin" }),
              _c("i", { staticClass: "fas me-2 fa-circle-notch fa-spin" }),
              _c("i", { staticClass: "fas me-2 fa-sync fa-spin" }),
              _c("i", { staticClass: "fas me-2 fa-cog fa-spin" }),
              _c("i", { staticClass: "fas me-2 fa-spinner fa-pulse" }),
            ]),
            _c(
              "div",
              {
                directives: [{ name: "highlight", rawName: "v-highlight" }],
                staticClass: "hljs-wrapper",
                attrs: { slot: "outsideBody" },
                slot: "outsideBody",
              },
              [
                _c("pre", [
                  _c("code", { staticClass: "html" }, [
                    _vm._v(
                      '<div class="fa-3x">\n  <i class="fas fa-spinner fa-spin"></i>\n  <i class="fas fa-circle-notch fa-spin"></i>\n  <i class="fas fa-sync fa-spin"></i>\n  <i class="fas fa-cog fa-spin"></i>\n  <i class="fas fa-spinner fa-pulse"></i>\n</div>'
                    ),
                  ]),
                ]),
              ]
            ),
          ]),
          _c(
            "panel",
            { attrs: { title: "Power Transforms: Rotating & Flipping" } },
            [
              _c("div", { staticClass: "fs-14px" }, [
                _c("div", { staticClass: "fa-3x" }, [
                  _c("i", {
                    staticClass: "fas fa-arrow-alt-circle-right me-2",
                  }),
                  _c("i", {
                    staticClass:
                      "fas fa-arrow-alt-circle-right me-2 fa-rotate-90",
                  }),
                  _c("i", {
                    staticClass:
                      "fas fa-arrow-alt-circle-right me-2 fa-rotate-180",
                  }),
                  _c("i", {
                    staticClass:
                      "fas fa-arrow-alt-circle-right me-2 fa-rotate-270",
                  }),
                  _c("i", {
                    staticClass:
                      "fas fa-arrow-alt-circle-right me-2 fa-flip-horizontal",
                  }),
                  _c("i", {
                    staticClass:
                      "fas fa-arrow-alt-circle-right me-2 fa-flip-vertical",
                  }),
                ]),
              ]),
              _c(
                "div",
                {
                  directives: [{ name: "highlight", rawName: "v-highlight" }],
                  staticClass: "hljs-wrapper",
                  attrs: { slot: "outsideBody" },
                  slot: "outsideBody",
                },
                [
                  _c("pre", [
                    _c("code", { staticClass: "html" }, [
                      _vm._v(
                        '<div class="fa-3x">\n  <i class="fas fa-arrow-alt-circle-right"></i>\n  <i class="fas fa-arrow-alt-circle-right fa-rotate-90"></i>\n  <i class="fas fa-arrow-alt-circle-right fa-rotate-180"></i>\n  <i class="fas fa-arrow-alt-circle-right fa-rotate-270"></i>\n  <i class="fas fa-arrow-alt-circle-right fa-flip-horizontal"></i>\n  <i class="fas fa-arrow-alt-circle-right fa-flip-vertical"></i>\n</div>'
                      ),
                    ]),
                  ]),
                ]
              ),
            ]
          ),
        ],
        1
      ),
      _c(
        "div",
        { staticClass: "col-xl-6" },
        [
          _c("panel", { attrs: { title: "List Icons" } }, [
            _c("div", { staticClass: "fs-14px" }, [
              _c("ul", { staticClass: "fa-ul" }, [
                _c("li", [
                  _c("span", { staticClass: "fa-li" }, [
                    _c("i", {
                      staticClass: "fas fa-check-square text-primary",
                    }),
                  ]),
                  _vm._v("List icons can"),
                ]),
                _c("li", [
                  _c("span", { staticClass: "fa-li" }, [
                    _c("i", { staticClass: "fas fa-check-square text-muted" }),
                  ]),
                  _vm._v("be used to"),
                ]),
                _c("li", [
                  _c("span", { staticClass: "fa-li" }, [
                    _c("i", {
                      staticClass: "fas fa-spinner fa-pulse text-success",
                    }),
                  ]),
                  _vm._v("replace bullets"),
                ]),
                _c("li", [
                  _c("span", { staticClass: "fa-li" }, [
                    _c("i", { staticClass: "far fa-square text-dark" }),
                  ]),
                  _vm._v("in lists"),
                ]),
              ]),
            ]),
            _c(
              "div",
              {
                directives: [{ name: "highlight", rawName: "v-highlight" }],
                staticClass: "hljs-wrapper",
                attrs: { slot: "outsideBody" },
                slot: "outsideBody",
              },
              [
                _c("pre", [
                  _c("code", { staticClass: "html" }, [
                    _vm._v(
                      '<ul class="fa-ul">\n  <li>\n    <span class="fa-li"><i class="fas fa-check-square"></i></span>\n    List icons can\n  </li>\n  <li>\n    <span class="fa-li"><i class="fas fa-check-square"></i></span>\n    be used to\n  </li>\n  <li>\n    <span class="fa-li"><i class="fas fa-spinner fa-pulse"></i></span>\n    replace bullets\n  </li>\n  <li>\n    <span class="fa-li"><i class="far fa-square"></i></span>\n    in lists\n  </li>\n</ul>'
                    ),
                  ]),
                ]),
              ]
            ),
          ]),
          _c("panel", { attrs: { title: "Bordered & Pulled Icons" } }, [
            _c("div", { staticClass: "fs-14px" }, [
              _c("i", {
                staticClass:
                  "fas fa-quote-left fa-3x float-start me-3 fa-border",
              }),
              _vm._v(
                " Gatsby believed in the green light, the orgastic future that year by year recedes before us. It eluded us then, but that’s no matter — tomorrow we will run faster, stretch our arms further... And one fine morning — So we beat on, boats against the current, borne back ceaselessly into the past. "
              ),
            ]),
            _c(
              "div",
              {
                directives: [{ name: "highlight", rawName: "v-highlight" }],
                staticClass: "hljs-wrapper",
                attrs: { slot: "outsideBody" },
                slot: "outsideBody",
              },
              [
                _c("pre", [
                  _c("code", { staticClass: "html" }, [
                    _vm._v(
                      '<i class="fas fa-quote-left fa-2x float-start me-3 fa-border"></i>\nGatsby believed in the green light, the orgastic future that year by year recedes before us. It eluded us then, but that’s no matter — tomorrow we will run faster, stretch our arms further... And one fine morning — So we beat on, boats against the current, borne back ceaselessly into the past.'
                    ),
                  ]),
                ]),
              ]
            ),
          ]),
          _c("panel", { attrs: { title: "Stacked Icons" } }, [
            _c("div", { staticClass: "fs-14px" }, [
              _c("span", { staticClass: "fa-stack fa-2x" }, [
                _c("i", { staticClass: "far fa-square fa-stack-2x" }),
                _c("i", { staticClass: "fab fa-twitter fa-stack-1x" }),
              ]),
              _c("span", { staticClass: "fa-stack fa-2x" }, [
                _c("i", { staticClass: "fa fa-circle fa-stack-2x" }),
                _c("i", { staticClass: "fa fa-flag fa-stack-1x fa-inverse" }),
              ]),
              _c("span", { staticClass: "fa-stack fa-2x" }, [
                _c("i", { staticClass: "fa fa-square fa-stack-2x" }),
                _c("i", {
                  staticClass: "fa fa-terminal fa-stack-1x fa-inverse",
                }),
              ]),
              _c("span", { staticClass: "fa-stack fa-2x" }, [
                _c("i", { staticClass: "fa fa-camera fa-stack-1x" }),
                _c("i", { staticClass: "fa fa-ban fa-stack-2x" }),
              ]),
              _c("span", { staticClass: "fa-stack fa-2x" }, [
                _c("i", { staticClass: "far fa-circle fa-stack-2x" }),
                _c("i", { staticClass: "fa fa-cog fa-stack-1x" }),
              ]),
            ]),
            _c(
              "div",
              {
                directives: [{ name: "highlight", rawName: "v-highlight" }],
                staticClass: "hljs-wrapper",
                attrs: { slot: "outsideBody" },
                slot: "outsideBody",
              },
              [
                _c("pre", [
                  _c("code", { staticClass: "html" }, [
                    _vm._v(
                      '<span class="fa-stack fa-2x text-primary">\n  <i class="far fa-square fa-stack-2x"></i>\n  <i class="fab fa-twitter fa-stack-1x"></i>\n</span>\n<span class="fa-stack fa-2x">\n  <i class="fa fa-circle fa-stack-2x"></i>\n  <i class="fa fa-flag fa-stack-1x fa-inverse"></i>\n</span>\n<span class="fa-stack fa-2x">\n  <i class="fa fa-square fa-stack-2x"></i>\n  <i class="fa fa-terminal fa-stack-1x fa-inverse"></i>\n</span>\n<span class="fa-stack fa-2x">\n  <i class="fa fa-camera fa-stack-1x"></i>\n  <i class="fa fa-ban fa-stack-2x"></i>\n</span>\n<span class="fa-stack fa-2x">\n  <i class="far fa-circle fa-stack-2x"></i>\n  <i class="fa fa-cog fa-stack-1x"></i>\n</span>'
                    ),
                  ]),
                ]),
              ]
            ),
          ]),
        ],
        1
      ),
    ]),
    _vm._m(2),
  ])
}
var staticRenderFns = [
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("ol", { staticClass: "breadcrumb float-xl-end" }, [
      _c("li", { staticClass: "breadcrumb-item" }, [
        _c("a", { attrs: { href: "javascript:;" } }, [_vm._v("Home")]),
      ]),
      _c("li", { staticClass: "breadcrumb-item" }, [
        _c("a", { attrs: { href: "javascript:;" } }, [_vm._v("UI Elements")]),
      ]),
      _c("li", { staticClass: "breadcrumb-item active" }, [_vm._v("Icons")]),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("h1", { staticClass: "page-header" }, [
      _vm._v("Icons "),
      _c("small", [_vm._v("FontAwesome v6 Beta with 1,545 Free Icons")]),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "row" }, [
      _c("div", { staticClass: "col-xl-6" }, [
        _c("h3", { staticClass: "mb-10px" }, [_c("b", [_vm._v("Solid")])]),
        _c("p", { staticClass: "mb-20px" }, [
          _vm._v(" Solid type Font Awesome Icon prefix "),
          _c("code", [_vm._v("fas fa-*")]),
        ]),
        _c("div", { staticClass: "row mb-20px fs-13px" }, [
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-0" }),
              _vm._v(" "),
              _c("span", [_vm._v("0")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-1" }),
              _vm._v(" "),
              _c("span", [_vm._v("1")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-2" }),
              _vm._v(" "),
              _c("span", [_vm._v("2")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-3" }),
              _vm._v(" "),
              _c("span", [_vm._v("3")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-4" }),
              _vm._v(" "),
              _c("span", [_vm._v("4")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-5" }),
              _vm._v(" "),
              _c("span", [_vm._v("5")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-6" }),
              _vm._v(" "),
              _c("span", [_vm._v("6")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-7" }),
              _vm._v(" "),
              _c("span", [_vm._v("7")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-8" }),
              _vm._v(" "),
              _c("span", [_vm._v("8")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-9" }),
              _vm._v(" "),
              _c("span", [_vm._v("9")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-a" }),
              _vm._v(" "),
              _c("span", [_vm._v("a")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-address-book",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("address-book")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-address-card",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("address-card")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-align-center",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("align-center")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-align-justify",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("align-justify")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-align-left" }),
              _vm._v(" "),
              _c("span", [_vm._v("align-left")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-align-right",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("align-right")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-anchor" }),
              _vm._v(" "),
              _c("span", [_vm._v("anchor")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-angle-down" }),
              _vm._v(" "),
              _c("span", [_vm._v("angle-down")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-angle-left" }),
              _vm._v(" "),
              _c("span", [_vm._v("angle-left")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-angle-right",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("angle-right")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-angle-up" }),
              _vm._v(" "),
              _c("span", [_vm._v("angle-up")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-angles-down",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("angles-down")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-angles-left",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("angles-left")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-angles-right",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("angles-right")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-angles-up" }),
              _vm._v(" "),
              _c("span", [_vm._v("angles-up")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-ankh" }),
              _vm._v(" "),
              _c("span", [_vm._v("ankh")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-apple-whole",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("apple-whole")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-archway" }),
              _vm._v(" "),
              _c("span", [_vm._v("archway")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-arrow-down" }),
              _vm._v(" "),
              _c("span", [_vm._v("arrow-down")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-arrow-down-1-9",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("arrow-down-1-9")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-arrow-down-9-1",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("arrow-down-9-1")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-arrow-down-a-z",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("arrow-down-a-z")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-arrow-down-short-wide",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("arrow-down-short-wide")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-arrow-down-wide-short",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("arrow-down-wide-short")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-arrow-down-z-a",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("arrow-down-z-a")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-arrow-left" }),
              _vm._v(" "),
              _c("span", [_vm._v("arrow-left")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-arrow-pointer",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("arrow-pointer")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-arrow-right",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("arrow-right")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-arrow-rotate-left",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("arrow-rotate-left")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-arrow-rotate-right",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("arrow-rotate-right")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-arrow-trend-down",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("arrow-trend-down")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-arrow-trend-up",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("arrow-trend-up")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-arrow-up" }),
              _vm._v(" "),
              _c("span", [_vm._v("arrow-up")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-arrow-up-1-9",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("arrow-up-1-9")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-arrow-up-9-1",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("arrow-up-9-1")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-arrow-up-a-z",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("arrow-up-a-z")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-arrow-up-from-bracket",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("arrow-up-from-bracket")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-arrow-up-short-wide",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("arrow-up-short-wide")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-arrow-up-wide-short",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("arrow-up-wide-short")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-arrow-up-z-a",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("arrow-up-z-a")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-arrows-rotate",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("arrows-rotate")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-asterisk" }),
              _vm._v(" "),
              _c("span", [_vm._v("asterisk")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-at" }),
              _vm._v(" "),
              _c("span", [_vm._v("at")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-atom" }),
              _vm._v(" "),
              _c("span", [_vm._v("atom")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-audio-description",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("audio-description")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-austral-sign",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("austral-sign")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-award" }),
              _vm._v(" "),
              _c("span", [_vm._v("award")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-b" }),
              _vm._v(" "),
              _c("span", [_vm._v("b")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-baby" }),
              _vm._v(" "),
              _c("span", [_vm._v("baby")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-baby-carriage",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("baby-carriage")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-backward" }),
              _vm._v(" "),
              _c("span", [_vm._v("backward")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-backward-fast",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("backward-fast")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-backward-step",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("backward-step")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-bacon" }),
              _vm._v(" "),
              _c("span", [_vm._v("bacon")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-bacteria" }),
              _vm._v(" "),
              _c("span", [_vm._v("bacteria")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-bacterium" }),
              _vm._v(" "),
              _c("span", [_vm._v("bacterium")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-bag-shopping",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("bag-shopping")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-bahai" }),
              _vm._v(" "),
              _c("span", [_vm._v("bahai")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-baht-sign" }),
              _vm._v(" "),
              _c("span", [_vm._v("baht-sign")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-ban" }),
              _vm._v(" "),
              _c("span", [_vm._v("ban")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-ban-smoking",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("ban-smoking")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-bandage" }),
              _vm._v(" "),
              _c("span", [_vm._v("bandage")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-bank" }),
              _vm._v(" "),
              _c("span", [_vm._v("bank")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-barcode" }),
              _vm._v(" "),
              _c("span", [_vm._v("barcode")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-bars" }),
              _vm._v(" "),
              _c("span", [_vm._v("bars")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-bars-staggered",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("bars-staggered")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-baseball" }),
              _vm._v(" "),
              _c("span", [_vm._v("baseball")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-basket-shopping",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("basket-shopping")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-basketball" }),
              _vm._v(" "),
              _c("span", [_vm._v("basketball")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-bath" }),
              _vm._v(" "),
              _c("span", [_vm._v("bath")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-battery-empty",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("battery-empty")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-battery-full",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("battery-full")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-battery-half",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("battery-half")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-battery-quarter",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("battery-quarter")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass:
                  "fas fa-lg fa-fw me-10px fa-battery-three-quarters",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("battery-three-quarters")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-bed" }),
              _vm._v(" "),
              _c("span", [_vm._v("bed")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-bed-pulse" }),
              _vm._v(" "),
              _c("span", [_vm._v("bed-pulse")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-beer-mug-empty",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("beer-mug-empty")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-bell" }),
              _vm._v(" "),
              _c("span", [_vm._v("bell")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-bell-concierge",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("bell-concierge")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-bell-slash" }),
              _vm._v(" "),
              _c("span", [_vm._v("bell-slash")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-bezier-curve",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("bezier-curve")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-bicycle" }),
              _vm._v(" "),
              _c("span", [_vm._v("bicycle")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-binoculars" }),
              _vm._v(" "),
              _c("span", [_vm._v("binoculars")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-biohazard" }),
              _vm._v(" "),
              _c("span", [_vm._v("biohazard")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-bitcoin-sign",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("bitcoin-sign")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-blender" }),
              _vm._v(" "),
              _c("span", [_vm._v("blender")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-blender-phone",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("blender-phone")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-blog" }),
              _vm._v(" "),
              _c("span", [_vm._v("blog")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-bold" }),
              _vm._v(" "),
              _c("span", [_vm._v("bold")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-bolt" }),
              _vm._v(" "),
              _c("span", [_vm._v("bolt")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-bomb" }),
              _vm._v(" "),
              _c("span", [_vm._v("bomb")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-bone" }),
              _vm._v(" "),
              _c("span", [_vm._v("bone")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-bong" }),
              _vm._v(" "),
              _c("span", [_vm._v("bong")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-book" }),
              _vm._v(" "),
              _c("span", [_vm._v("book")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-book-atlas" }),
              _vm._v(" "),
              _c("span", [_vm._v("book-atlas")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-book-bible" }),
              _vm._v(" "),
              _c("span", [_vm._v("book-bible")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-book-journal-whills",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("book-journal-whills")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-book-medical",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("book-medical")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-book-open" }),
              _vm._v(" "),
              _c("span", [_vm._v("book-open")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-book-open-reader",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("book-open-reader")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-book-quran" }),
              _vm._v(" "),
              _c("span", [_vm._v("book-quran")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-book-skull" }),
              _vm._v(" "),
              _c("span", [_vm._v("book-skull")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-bookmark" }),
              _vm._v(" "),
              _c("span", [_vm._v("bookmark")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-border-all" }),
              _vm._v(" "),
              _c("span", [_vm._v("border-all")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-border-none",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("border-none")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-border-top-left",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("border-top-left")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-bowling-ball",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("bowling-ball")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-box" }),
              _vm._v(" "),
              _c("span", [_vm._v("box")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-box-archive",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("box-archive")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-box-open" }),
              _vm._v(" "),
              _c("span", [_vm._v("box-open")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-box-tissue" }),
              _vm._v(" "),
              _c("span", [_vm._v("box-tissue")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-boxes-stacked",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("boxes-stacked")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-braille" }),
              _vm._v(" "),
              _c("span", [_vm._v("braille")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-brain" }),
              _vm._v(" "),
              _c("span", [_vm._v("brain")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-bread-slice",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("bread-slice")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-briefcase" }),
              _vm._v(" "),
              _c("span", [_vm._v("briefcase")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-briefcase-medical",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("briefcase-medical")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-broom" }),
              _vm._v(" "),
              _c("span", [_vm._v("broom")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-brush" }),
              _vm._v(" "),
              _c("span", [_vm._v("brush")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-bug" }),
              _vm._v(" "),
              _c("span", [_vm._v("bug")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-building" }),
              _vm._v(" "),
              _c("span", [_vm._v("building")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-bullhorn" }),
              _vm._v(" "),
              _c("span", [_vm._v("bullhorn")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-bullseye" }),
              _vm._v(" "),
              _c("span", [_vm._v("bullseye")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-burger" }),
              _vm._v(" "),
              _c("span", [_vm._v("burger")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-bus" }),
              _vm._v(" "),
              _c("span", [_vm._v("bus")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-bus-simple" }),
              _vm._v(" "),
              _c("span", [_vm._v("bus-simple")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-business-time",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("business-time")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-c" }),
              _vm._v(" "),
              _c("span", [_vm._v("c")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-cake-candles",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("cake-candles")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-calculator" }),
              _vm._v(" "),
              _c("span", [_vm._v("calculator")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-calendar" }),
              _vm._v(" "),
              _c("span", [_vm._v("calendar")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-calendar-check",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("calendar-check")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-calendar-day",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("calendar-day")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-calendar-days",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("calendar-days")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-calendar-minus",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("calendar-minus")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-calendar-plus",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("calendar-plus")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-calendar-week",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("calendar-week")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-calendar-xmark",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("calendar-xmark")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-camera" }),
              _vm._v(" "),
              _c("span", [_vm._v("camera")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-camera-retro",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("camera-retro")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-camera-rotate",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("camera-rotate")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-campground" }),
              _vm._v(" "),
              _c("span", [_vm._v("campground")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-candy-cane" }),
              _vm._v(" "),
              _c("span", [_vm._v("candy-cane")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-cannabis" }),
              _vm._v(" "),
              _c("span", [_vm._v("cannabis")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-capsules" }),
              _vm._v(" "),
              _c("span", [_vm._v("capsules")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-car" }),
              _vm._v(" "),
              _c("span", [_vm._v("car")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-car-battery",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("car-battery")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-car-crash" }),
              _vm._v(" "),
              _c("span", [_vm._v("car-crash")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-car-rear" }),
              _vm._v(" "),
              _c("span", [_vm._v("car-rear")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-car-side" }),
              _vm._v(" "),
              _c("span", [_vm._v("car-side")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-caravan" }),
              _vm._v(" "),
              _c("span", [_vm._v("caravan")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-caret-down" }),
              _vm._v(" "),
              _c("span", [_vm._v("caret-down")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-caret-left" }),
              _vm._v(" "),
              _c("span", [_vm._v("caret-left")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-caret-right",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("caret-right")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-caret-up" }),
              _vm._v(" "),
              _c("span", [_vm._v("caret-up")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-carrot" }),
              _vm._v(" "),
              _c("span", [_vm._v("carrot")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-cart-arrow-down",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("cart-arrow-down")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-cart-flatbed",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("cart-flatbed")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-cart-flatbed-suitcase",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("cart-flatbed-suitcase")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-cart-plus" }),
              _vm._v(" "),
              _c("span", [_vm._v("cart-plus")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-cart-shopping",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("cart-shopping")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-cash-register",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("cash-register")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-cat" }),
              _vm._v(" "),
              _c("span", [_vm._v("cat")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-cedi-sign" }),
              _vm._v(" "),
              _c("span", [_vm._v("cedi-sign")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-cent-sign" }),
              _vm._v(" "),
              _c("span", [_vm._v("cent-sign")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-certificate",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("certificate")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-chair" }),
              _vm._v(" "),
              _c("span", [_vm._v("chair")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-chalkboard" }),
              _vm._v(" "),
              _c("span", [_vm._v("chalkboard")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-chalkboard-user",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("chalkboard-user")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-champagne-glasses",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("champagne-glasses")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-charging-station",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("charging-station")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-chart-area" }),
              _vm._v(" "),
              _c("span", [_vm._v("chart-area")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-chart-bar" }),
              _vm._v(" "),
              _c("span", [_vm._v("chart-bar")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-chart-gantt",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("chart-gantt")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-chart-line" }),
              _vm._v(" "),
              _c("span", [_vm._v("chart-line")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-chart-pie" }),
              _vm._v(" "),
              _c("span", [_vm._v("chart-pie")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-check" }),
              _vm._v(" "),
              _c("span", [_vm._v("check")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-check-double",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("check-double")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-check-to-slot",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("check-to-slot")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-cheese" }),
              _vm._v(" "),
              _c("span", [_vm._v("cheese")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-chess" }),
              _vm._v(" "),
              _c("span", [_vm._v("chess")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-chess-bishop",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("chess-bishop")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-chess-board",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("chess-board")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-chess-king" }),
              _vm._v(" "),
              _c("span", [_vm._v("chess-king")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-chess-knight",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("chess-knight")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-chess-pawn" }),
              _vm._v(" "),
              _c("span", [_vm._v("chess-pawn")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-chess-queen",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("chess-queen")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-chess-rook" }),
              _vm._v(" "),
              _c("span", [_vm._v("chess-rook")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-chevron-down",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("chevron-down")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-chevron-left",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("chevron-left")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-chevron-right",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("chevron-right")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-chevron-up" }),
              _vm._v(" "),
              _c("span", [_vm._v("chevron-up")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-child" }),
              _vm._v(" "),
              _c("span", [_vm._v("child")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-church" }),
              _vm._v(" "),
              _c("span", [_vm._v("church")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-circle" }),
              _vm._v(" "),
              _c("span", [_vm._v("circle")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-circle-arrow-down",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("circle-arrow-down")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-circle-arrow-left",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("circle-arrow-left")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-circle-arrow-right",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("circle-arrow-right")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-circle-arrow-up",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("circle-arrow-up")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-circle-check",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("circle-check")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-circle-chevron-down",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("circle-chevron-down")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-circle-chevron-left",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("circle-chevron-left")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-circle-chevron-right",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("circle-chevron-right")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-circle-chevron-up",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("circle-chevron-up")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-circle-dollar-to-slot",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("circle-dollar-to-slot")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-circle-dot" }),
              _vm._v(" "),
              _c("span", [_vm._v("circle-dot")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-circle-down",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("circle-down")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-circle-exclamation",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("circle-exclamation")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-circle-h" }),
              _vm._v(" "),
              _c("span", [_vm._v("circle-h")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-circle-half-stroke",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("circle-half-stroke")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-circle-info",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("circle-info")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-circle-left",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("circle-left")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-circle-minus",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("circle-minus")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-circle-notch",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("circle-notch")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-circle-pause",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("circle-pause")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-circle-play",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("circle-play")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-circle-plus",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("circle-plus")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-circle-question",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("circle-question")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-circle-radiation",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("circle-radiation")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-circle-right",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("circle-right")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-circle-stop",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("circle-stop")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-circle-up" }),
              _vm._v(" "),
              _c("span", [_vm._v("circle-up")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-circle-user",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("circle-user")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-circle-xmark",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("circle-xmark")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-city" }),
              _vm._v(" "),
              _c("span", [_vm._v("city")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-clapperboard",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("clapperboard")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-clipboard" }),
              _vm._v(" "),
              _c("span", [_vm._v("clipboard")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-clipboard-check",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("clipboard-check")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-clipboard-list",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("clipboard-list")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-clock" }),
              _vm._v(" "),
              _c("span", [_vm._v("clock")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-clock-rotate-left",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("clock-rotate-left")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-clone" }),
              _vm._v(" "),
              _c("span", [_vm._v("clone")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-closed-captioning",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("closed-captioning")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-cloud" }),
              _vm._v(" "),
              _c("span", [_vm._v("cloud")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-cloud-arrow-down",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("cloud-arrow-down")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-cloud-arrow-up",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("cloud-arrow-up")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-cloud-meatball",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("cloud-meatball")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-cloud-moon" }),
              _vm._v(" "),
              _c("span", [_vm._v("cloud-moon")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-cloud-moon-rain",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("cloud-moon-rain")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-cloud-rain" }),
              _vm._v(" "),
              _c("span", [_vm._v("cloud-rain")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-cloud-showers-heavy",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("cloud-showers-heavy")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-cloud-sun" }),
              _vm._v(" "),
              _c("span", [_vm._v("cloud-sun")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-cloud-sun-rain",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("cloud-sun-rain")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-clover" }),
              _vm._v(" "),
              _c("span", [_vm._v("clover")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-code" }),
              _vm._v(" "),
              _c("span", [_vm._v("code")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-code-branch",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("code-branch")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-code-commit",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("code-commit")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-code-compare",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("code-compare")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-code-fork" }),
              _vm._v(" "),
              _c("span", [_vm._v("code-fork")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-code-merge" }),
              _vm._v(" "),
              _c("span", [_vm._v("code-merge")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-code-pull-request",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("code-pull-request")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-coins" }),
              _vm._v(" "),
              _c("span", [_vm._v("coins")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-colon-sign" }),
              _vm._v(" "),
              _c("span", [_vm._v("colon-sign")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-comment" }),
              _vm._v(" "),
              _c("span", [_vm._v("comment")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-comment-dollar",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("comment-dollar")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-comment-dots",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("comment-dots")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-comment-medical",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("comment-medical")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-comment-slash",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("comment-slash")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-comment-sms",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("comment-sms")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-comments" }),
              _vm._v(" "),
              _c("span", [_vm._v("comments")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-comments-dollar",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("comments-dollar")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-compact-disc",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("compact-disc")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-compass" }),
              _vm._v(" "),
              _c("span", [_vm._v("compass")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-compass-drafting",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("compass-drafting")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-compress" }),
              _vm._v(" "),
              _c("span", [_vm._v("compress")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-computer-mouse",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("computer-mouse")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-cookie" }),
              _vm._v(" "),
              _c("span", [_vm._v("cookie")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-cookie-bite",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("cookie-bite")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-copy" }),
              _vm._v(" "),
              _c("span", [_vm._v("copy")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-copyright" }),
              _vm._v(" "),
              _c("span", [_vm._v("copyright")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-couch" }),
              _vm._v(" "),
              _c("span", [_vm._v("couch")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-credit-card",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("credit-card")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-crop" }),
              _vm._v(" "),
              _c("span", [_vm._v("crop")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-crop-simple",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("crop-simple")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-cross" }),
              _vm._v(" "),
              _c("span", [_vm._v("cross")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-crosshairs" }),
              _vm._v(" "),
              _c("span", [_vm._v("crosshairs")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-crow" }),
              _vm._v(" "),
              _c("span", [_vm._v("crow")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-crown" }),
              _vm._v(" "),
              _c("span", [_vm._v("crown")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-crutch" }),
              _vm._v(" "),
              _c("span", [_vm._v("crutch")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-cruzeiro-sign",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("cruzeiro-sign")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-cube" }),
              _vm._v(" "),
              _c("span", [_vm._v("cube")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-cubes" }),
              _vm._v(" "),
              _c("span", [_vm._v("cubes")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-d" }),
              _vm._v(" "),
              _c("span", [_vm._v("d")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-database" }),
              _vm._v(" "),
              _c("span", [_vm._v("database")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-delete-left",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("delete-left")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-democrat" }),
              _vm._v(" "),
              _c("span", [_vm._v("democrat")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-desktop" }),
              _vm._v(" "),
              _c("span", [_vm._v("desktop")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-dharmachakra",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("dharmachakra")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-diagram-project",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("diagram-project")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-diamond-turn-right",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("diamond-turn-right")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-dice" }),
              _vm._v(" "),
              _c("span", [_vm._v("dice")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-dice-d20" }),
              _vm._v(" "),
              _c("span", [_vm._v("dice-d20")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-dice-d6" }),
              _vm._v(" "),
              _c("span", [_vm._v("dice-d6")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-dice-five" }),
              _vm._v(" "),
              _c("span", [_vm._v("dice-five")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-dice-four" }),
              _vm._v(" "),
              _c("span", [_vm._v("dice-four")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-dice-one" }),
              _vm._v(" "),
              _c("span", [_vm._v("dice-one")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-dice-six" }),
              _vm._v(" "),
              _c("span", [_vm._v("dice-six")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-dice-three" }),
              _vm._v(" "),
              _c("span", [_vm._v("dice-three")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-dice-two" }),
              _vm._v(" "),
              _c("span", [_vm._v("dice-two")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-disease" }),
              _vm._v(" "),
              _c("span", [_vm._v("disease")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-divide" }),
              _vm._v(" "),
              _c("span", [_vm._v("divide")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-dna" }),
              _vm._v(" "),
              _c("span", [_vm._v("dna")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-dog" }),
              _vm._v(" "),
              _c("span", [_vm._v("dog")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-dollar-sign",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("dollar-sign")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-dolly" }),
              _vm._v(" "),
              _c("span", [_vm._v("dolly")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-dong-sign" }),
              _vm._v(" "),
              _c("span", [_vm._v("dong-sign")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-door-closed",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("door-closed")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-door-open" }),
              _vm._v(" "),
              _c("span", [_vm._v("door-open")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-dove" }),
              _vm._v(" "),
              _c("span", [_vm._v("dove")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass:
                  "fas fa-lg fa-fw me-10px fa-down-left-and-up-right-to-center",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("down-left-and-up-right-to-center")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-down-long" }),
              _vm._v(" "),
              _c("span", [_vm._v("down-long")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-download" }),
              _vm._v(" "),
              _c("span", [_vm._v("download")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-dragon" }),
              _vm._v(" "),
              _c("span", [_vm._v("dragon")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-draw-polygon",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("draw-polygon")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-droplet" }),
              _vm._v(" "),
              _c("span", [_vm._v("droplet")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-droplet-slash",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("droplet-slash")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-drum" }),
              _vm._v(" "),
              _c("span", [_vm._v("drum")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-drum-steelpan",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("drum-steelpan")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-drumstick-bite",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("drumstick-bite")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-dumbbell" }),
              _vm._v(" "),
              _c("span", [_vm._v("dumbbell")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-dumpster" }),
              _vm._v(" "),
              _c("span", [_vm._v("dumpster")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-dumpster-fire",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("dumpster-fire")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-dungeon" }),
              _vm._v(" "),
              _c("span", [_vm._v("dungeon")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-e" }),
              _vm._v(" "),
              _c("span", [_vm._v("e")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-ear-deaf" }),
              _vm._v(" "),
              _c("span", [_vm._v("ear-deaf")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-ear-listen" }),
              _vm._v(" "),
              _c("span", [_vm._v("ear-listen")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-earth-africa",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("earth-africa")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-earth-americas",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("earth-americas")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-earth-asia" }),
              _vm._v(" "),
              _c("span", [_vm._v("earth-asia")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-earth-europa",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("earth-europa")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-egg" }),
              _vm._v(" "),
              _c("span", [_vm._v("egg")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-eject" }),
              _vm._v(" "),
              _c("span", [_vm._v("eject")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-elevator" }),
              _vm._v(" "),
              _c("span", [_vm._v("elevator")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-ellipsis" }),
              _vm._v(" "),
              _c("span", [_vm._v("ellipsis")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-ellipsis-vertical",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("ellipsis-vertical")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-envelope" }),
              _vm._v(" "),
              _c("span", [_vm._v("envelope")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-envelope-open",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("envelope-open")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-envelope-open-text",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("envelope-open-text")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-envelopes-bulk",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("envelopes-bulk")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-equals" }),
              _vm._v(" "),
              _c("span", [_vm._v("equals")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-eraser" }),
              _vm._v(" "),
              _c("span", [_vm._v("eraser")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-ethernet" }),
              _vm._v(" "),
              _c("span", [_vm._v("ethernet")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-euro-sign" }),
              _vm._v(" "),
              _c("span", [_vm._v("euro-sign")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-exclamation",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("exclamation")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-expand" }),
              _vm._v(" "),
              _c("span", [_vm._v("expand")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-eye" }),
              _vm._v(" "),
              _c("span", [_vm._v("eye")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-eye-dropper",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("eye-dropper")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-eye-low-vision",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("eye-low-vision")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-eye-slash" }),
              _vm._v(" "),
              _c("span", [_vm._v("eye-slash")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-f" }),
              _vm._v(" "),
              _c("span", [_vm._v("f")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-face-angry" }),
              _vm._v(" "),
              _c("span", [_vm._v("face-angry")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-face-dizzy" }),
              _vm._v(" "),
              _c("span", [_vm._v("face-dizzy")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-face-flushed",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("face-flushed")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-face-frown" }),
              _vm._v(" "),
              _c("span", [_vm._v("face-frown")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-face-frown-open",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("face-frown-open")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-face-grimace",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("face-grimace")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-face-grin" }),
              _vm._v(" "),
              _c("span", [_vm._v("face-grin")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-face-grin-beam",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("face-grin-beam")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-face-grin-beam-sweat",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("face-grin-beam-sweat")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-face-grin-hearts",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("face-grin-hearts")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-face-grin-squint",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("face-grin-squint")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass:
                  "fas fa-lg fa-fw me-10px fa-face-grin-squint-tears",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("face-grin-squint-tears")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-face-grin-stars",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("face-grin-stars")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-face-grin-tears",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("face-grin-tears")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-face-grin-tongue",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("face-grin-tongue")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass:
                  "fas fa-lg fa-fw me-10px fa-face-grin-tongue-squint",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("face-grin-tongue-squint")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-face-grin-tongue-wink",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("face-grin-tongue-wink")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-face-grin-wide",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("face-grin-wide")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-face-grin-wink",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("face-grin-wink")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-face-kiss" }),
              _vm._v(" "),
              _c("span", [_vm._v("face-kiss")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-face-kiss-beam",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("face-kiss-beam")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-face-kiss-wink-heart",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("face-kiss-wink-heart")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-face-laugh" }),
              _vm._v(" "),
              _c("span", [_vm._v("face-laugh")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-face-laugh-beam",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("face-laugh-beam")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-face-laugh-squint",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("face-laugh-squint")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-face-laugh-wink",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("face-laugh-wink")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-face-meh" }),
              _vm._v(" "),
              _c("span", [_vm._v("face-meh")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-face-meh-blank",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("face-meh-blank")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-face-rolling-eyes",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("face-rolling-eyes")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-face-sad-cry",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("face-sad-cry")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-face-sad-tear",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("face-sad-tear")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-face-smile" }),
              _vm._v(" "),
              _c("span", [_vm._v("face-smile")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-face-smile-beam",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("face-smile-beam")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-face-smile-wink",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("face-smile-wink")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-face-surprise",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("face-surprise")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-face-tired" }),
              _vm._v(" "),
              _c("span", [_vm._v("face-tired")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-fan" }),
              _vm._v(" "),
              _c("span", [_vm._v("fan")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-faucet" }),
              _vm._v(" "),
              _c("span", [_vm._v("faucet")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-fax" }),
              _vm._v(" "),
              _c("span", [_vm._v("fax")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-feather" }),
              _vm._v(" "),
              _c("span", [_vm._v("feather")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-feather-pointed",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("feather-pointed")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-file" }),
              _vm._v(" "),
              _c("span", [_vm._v("file")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-file-arrow-down",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("file-arrow-down")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-file-arrow-up",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("file-arrow-up")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-file-audio" }),
              _vm._v(" "),
              _c("span", [_vm._v("file-audio")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-file-code" }),
              _vm._v(" "),
              _c("span", [_vm._v("file-code")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-file-contract",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("file-contract")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-file-csv" }),
              _vm._v(" "),
              _c("span", [_vm._v("file-csv")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-file-excel" }),
              _vm._v(" "),
              _c("span", [_vm._v("file-excel")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-file-export",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("file-export")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-file-image" }),
              _vm._v(" "),
              _c("span", [_vm._v("file-image")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-file-import",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("file-import")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-file-invoice",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("file-invoice")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-file-invoice-dollar",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("file-invoice-dollar")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-file-lines" }),
              _vm._v(" "),
              _c("span", [_vm._v("file-lines")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-file-medical",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("file-medical")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-file-pdf" }),
              _vm._v(" "),
              _c("span", [_vm._v("file-pdf")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-file-powerpoint",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("file-powerpoint")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-file-prescription",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("file-prescription")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-file-signature",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("file-signature")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-file-video" }),
              _vm._v(" "),
              _c("span", [_vm._v("file-video")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-file-waveform",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("file-waveform")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-file-word" }),
              _vm._v(" "),
              _c("span", [_vm._v("file-word")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-file-zipper",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("file-zipper")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-fill" }),
              _vm._v(" "),
              _c("span", [_vm._v("fill")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-fill-drip" }),
              _vm._v(" "),
              _c("span", [_vm._v("fill-drip")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-film" }),
              _vm._v(" "),
              _c("span", [_vm._v("film")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-filter" }),
              _vm._v(" "),
              _c("span", [_vm._v("filter")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-filter-circle-dollar",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("filter-circle-dollar")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-filter-circle-xmark",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("filter-circle-xmark")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-fingerprint",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("fingerprint")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-fire" }),
              _vm._v(" "),
              _c("span", [_vm._v("fire")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-fire-extinguisher",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("fire-extinguisher")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-fire-flame-curved",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("fire-flame-curved")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-fire-flame-simple",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("fire-flame-simple")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-fish" }),
              _vm._v(" "),
              _c("span", [_vm._v("fish")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-flag" }),
              _vm._v(" "),
              _c("span", [_vm._v("flag")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-flag-checkered",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("flag-checkered")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-flag-usa" }),
              _vm._v(" "),
              _c("span", [_vm._v("flag-usa")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-flask" }),
              _vm._v(" "),
              _c("span", [_vm._v("flask")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-floppy-disk",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("floppy-disk")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-florin-sign",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("florin-sign")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-folder" }),
              _vm._v(" "),
              _c("span", [_vm._v("folder")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-folder-minus",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("folder-minus")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-folder-open",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("folder-open")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-folder-plus",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("folder-plus")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-folder-tree",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("folder-tree")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-font" }),
              _vm._v(" "),
              _c("span", [_vm._v("font")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-font-awesome",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("font-awesome")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-football" }),
              _vm._v(" "),
              _c("span", [_vm._v("football")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-forward" }),
              _vm._v(" "),
              _c("span", [_vm._v("forward")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-forward-fast",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("forward-fast")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-forward-step",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("forward-step")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-franc-sign" }),
              _vm._v(" "),
              _c("span", [_vm._v("franc-sign")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-frog" }),
              _vm._v(" "),
              _c("span", [_vm._v("frog")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-futbol" }),
              _vm._v(" "),
              _c("span", [_vm._v("futbol")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-g" }),
              _vm._v(" "),
              _c("span", [_vm._v("g")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-gamepad" }),
              _vm._v(" "),
              _c("span", [_vm._v("gamepad")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-gas-pump" }),
              _vm._v(" "),
              _c("span", [_vm._v("gas-pump")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-gauge-simple",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("gauge-simple")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-gavel" }),
              _vm._v(" "),
              _c("span", [_vm._v("gavel")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-gear" }),
              _vm._v(" "),
              _c("span", [_vm._v("gear")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-gears" }),
              _vm._v(" "),
              _c("span", [_vm._v("gears")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-gem" }),
              _vm._v(" "),
              _c("span", [_vm._v("gem")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-genderless" }),
              _vm._v(" "),
              _c("span", [_vm._v("genderless")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-ghost" }),
              _vm._v(" "),
              _c("span", [_vm._v("ghost")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-gift" }),
              _vm._v(" "),
              _c("span", [_vm._v("gift")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-gifts" }),
              _vm._v(" "),
              _c("span", [_vm._v("gifts")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-glasses" }),
              _vm._v(" "),
              _c("span", [_vm._v("glasses")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-globe" }),
              _vm._v(" "),
              _c("span", [_vm._v("globe")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-golf-ball-tee",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("golf-ball-tee")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-gopuram" }),
              _vm._v(" "),
              _c("span", [_vm._v("gopuram")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-graduation-cap",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("graduation-cap")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-greater-than",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("greater-than")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-greater-than-equal",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("greater-than-equal")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-grip" }),
              _vm._v(" "),
              _c("span", [_vm._v("grip")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-grip-lines" }),
              _vm._v(" "),
              _c("span", [_vm._v("grip-lines")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-grip-lines-vertical",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("grip-lines-vertical")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-grip-vertical",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("grip-vertical")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-guarani-sign",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("guarani-sign")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-guitar" }),
              _vm._v(" "),
              _c("span", [_vm._v("guitar")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-gun" }),
              _vm._v(" "),
              _c("span", [_vm._v("gun")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-h" }),
              _vm._v(" "),
              _c("span", [_vm._v("h")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-hammer" }),
              _vm._v(" "),
              _c("span", [_vm._v("hammer")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-hamsa" }),
              _vm._v(" "),
              _c("span", [_vm._v("hamsa")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-hand" }),
              _vm._v(" "),
              _c("span", [_vm._v("hand")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-hand-back-fist",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("hand-back-fist")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-hand-dots" }),
              _vm._v(" "),
              _c("span", [_vm._v("hand-dots")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-hand-fist" }),
              _vm._v(" "),
              _c("span", [_vm._v("hand-fist")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-hand-holding",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("hand-holding")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-hand-holding-dollar",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("hand-holding-dollar")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-hand-holding-droplet",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("hand-holding-droplet")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-hand-holding-heart",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("hand-holding-heart")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-hand-holding-medical",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("hand-holding-medical")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-hand-lizard",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("hand-lizard")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-hand-middle-finger",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("hand-middle-finger")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-hand-peace" }),
              _vm._v(" "),
              _c("span", [_vm._v("hand-peace")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-hand-point-down",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("hand-point-down")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-hand-point-left",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("hand-point-left")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-hand-point-right",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("hand-point-right")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-hand-point-up",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("hand-point-up")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-hand-pointer",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("hand-pointer")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-hand-scissors",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("hand-scissors")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-hand-sparkles",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("hand-sparkles")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-hand-spock" }),
              _vm._v(" "),
              _c("span", [_vm._v("hand-spock")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-hands" }),
              _vm._v(" "),
              _c("span", [_vm._v("hands")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass:
                  "fas fa-lg fa-fw me-10px fa-hands-asl-interpreting",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("hands-asl-interpreting")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-hands-bubbles",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("hands-bubbles")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-hands-clapping",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("hands-clapping")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-hands-holding",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("hands-holding")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-hands-praying",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("hands-praying")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-handshake" }),
              _vm._v(" "),
              _c("span", [_vm._v("handshake")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-handshake-angle",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("handshake-angle")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass:
                  "fas fa-lg fa-fw me-10px fa-handshake-simple-slash",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("handshake-simple-slash")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-handshake-slash",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("handshake-slash")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-hanukiah" }),
              _vm._v(" "),
              _c("span", [_vm._v("hanukiah")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-hard-drive" }),
              _vm._v(" "),
              _c("span", [_vm._v("hard-drive")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-hashtag" }),
              _vm._v(" "),
              _c("span", [_vm._v("hashtag")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-hat-cowboy" }),
              _vm._v(" "),
              _c("span", [_vm._v("hat-cowboy")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-hat-cowboy-side",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("hat-cowboy-side")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-hat-wizard" }),
              _vm._v(" "),
              _c("span", [_vm._v("hat-wizard")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-head-side-cough",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("head-side-cough")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-head-side-cough-slash",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("head-side-cough-slash")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-head-side-mask",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("head-side-mask")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-head-side-virus",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("head-side-virus")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-heading" }),
              _vm._v(" "),
              _c("span", [_vm._v("heading")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-headphones" }),
              _vm._v(" "),
              _c("span", [_vm._v("headphones")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-headphones-simple",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("headphones-simple")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-headset" }),
              _vm._v(" "),
              _c("span", [_vm._v("headset")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-heart" }),
              _vm._v(" "),
              _c("span", [_vm._v("heart")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-heart-crack",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("heart-crack")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-heart-pulse",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("heart-pulse")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-helicopter" }),
              _vm._v(" "),
              _c("span", [_vm._v("helicopter")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-helmet-safety",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("helmet-safety")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-highlighter",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("highlighter")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-hippo" }),
              _vm._v(" "),
              _c("span", [_vm._v("hippo")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-hockey-puck",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("hockey-puck")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-holly-berry",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("holly-berry")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-horse" }),
              _vm._v(" "),
              _c("span", [_vm._v("horse")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-horse-head" }),
              _vm._v(" "),
              _c("span", [_vm._v("horse-head")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-hospital" }),
              _vm._v(" "),
              _c("span", [_vm._v("hospital")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-hospital-user",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("hospital-user")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-hospital-wide",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("hospital-wide")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-hot-tub-person",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("hot-tub-person")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-hotdog" }),
              _vm._v(" "),
              _c("span", [_vm._v("hotdog")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-hotel" }),
              _vm._v(" "),
              _c("span", [_vm._v("hotel")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-hourglass" }),
              _vm._v(" "),
              _c("span", [_vm._v("hourglass")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-hourglass-empty",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("hourglass-empty")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-hourglass-end",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("hourglass-end")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-hourglass-start",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("hourglass-start")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-house" }),
              _vm._v(" "),
              _c("span", [_vm._v("house")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-house-chimney",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("house-chimney")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-house-crack",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("house-crack")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-house-laptop",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("house-laptop")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-house-medical",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("house-medical")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-house-user" }),
              _vm._v(" "),
              _c("span", [_vm._v("house-user")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-hryvnia-sign",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("hryvnia-sign")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-i" }),
              _vm._v(" "),
              _c("span", [_vm._v("i")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-i-cursor" }),
              _vm._v(" "),
              _c("span", [_vm._v("i-cursor")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-ice-cream" }),
              _vm._v(" "),
              _c("span", [_vm._v("ice-cream")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-icicles" }),
              _vm._v(" "),
              _c("span", [_vm._v("icicles")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-icons" }),
              _vm._v(" "),
              _c("span", [_vm._v("icons")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-id-badge" }),
              _vm._v(" "),
              _c("span", [_vm._v("id-badge")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-id-card" }),
              _vm._v(" "),
              _c("span", [_vm._v("id-card")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-id-card-clip",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("id-card-clip")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-igloo" }),
              _vm._v(" "),
              _c("span", [_vm._v("igloo")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-image" }),
              _vm._v(" "),
              _c("span", [_vm._v("image")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-image-portrait",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("image-portrait")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-images" }),
              _vm._v(" "),
              _c("span", [_vm._v("images")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-inbox" }),
              _vm._v(" "),
              _c("span", [_vm._v("inbox")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-indent" }),
              _vm._v(" "),
              _c("span", [_vm._v("indent")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-indian-rupee-sign",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("indian-rupee-sign")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-industry" }),
              _vm._v(" "),
              _c("span", [_vm._v("industry")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-infinity" }),
              _vm._v(" "),
              _c("span", [_vm._v("infinity")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-info" }),
              _vm._v(" "),
              _c("span", [_vm._v("info")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-italic" }),
              _vm._v(" "),
              _c("span", [_vm._v("italic")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-j" }),
              _vm._v(" "),
              _c("span", [_vm._v("j")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-jedi" }),
              _vm._v(" "),
              _c("span", [_vm._v("jedi")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-jet-fighter",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("jet-fighter")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-joint" }),
              _vm._v(" "),
              _c("span", [_vm._v("joint")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-k" }),
              _vm._v(" "),
              _c("span", [_vm._v("k")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-kaaba" }),
              _vm._v(" "),
              _c("span", [_vm._v("kaaba")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-key" }),
              _vm._v(" "),
              _c("span", [_vm._v("key")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-keyboard" }),
              _vm._v(" "),
              _c("span", [_vm._v("keyboard")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-khanda" }),
              _vm._v(" "),
              _c("span", [_vm._v("khanda")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-kip-sign" }),
              _vm._v(" "),
              _c("span", [_vm._v("kip-sign")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-kit-medical",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("kit-medical")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-kiwi-bird" }),
              _vm._v(" "),
              _c("span", [_vm._v("kiwi-bird")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-l" }),
              _vm._v(" "),
              _c("span", [_vm._v("l")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-landmark" }),
              _vm._v(" "),
              _c("span", [_vm._v("landmark")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-language" }),
              _vm._v(" "),
              _c("span", [_vm._v("language")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-laptop" }),
              _vm._v(" "),
              _c("span", [_vm._v("laptop")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-laptop-code",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("laptop-code")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-laptop-medical",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("laptop-medical")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-lari-sign" }),
              _vm._v(" "),
              _c("span", [_vm._v("lari-sign")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-layer-group",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("layer-group")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-leaf" }),
              _vm._v(" "),
              _c("span", [_vm._v("leaf")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-left-long" }),
              _vm._v(" "),
              _c("span", [_vm._v("left-long")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-left-right" }),
              _vm._v(" "),
              _c("span", [_vm._v("left-right")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-lemon" }),
              _vm._v(" "),
              _c("span", [_vm._v("lemon")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-less-than" }),
              _vm._v(" "),
              _c("span", [_vm._v("less-than")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-less-than-equal",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("less-than-equal")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-life-ring" }),
              _vm._v(" "),
              _c("span", [_vm._v("life-ring")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-lightbulb" }),
              _vm._v(" "),
              _c("span", [_vm._v("lightbulb")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-link" }),
              _vm._v(" "),
              _c("span", [_vm._v("link")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-link-slash" }),
              _vm._v(" "),
              _c("span", [_vm._v("link-slash")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-lira-sign" }),
              _vm._v(" "),
              _c("span", [_vm._v("lira-sign")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-list" }),
              _vm._v(" "),
              _c("span", [_vm._v("list")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-list-check" }),
              _vm._v(" "),
              _c("span", [_vm._v("list-check")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-list-ol" }),
              _vm._v(" "),
              _c("span", [_vm._v("list-ol")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-list-ul" }),
              _vm._v(" "),
              _c("span", [_vm._v("list-ul")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-litecoin-sign",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("litecoin-sign")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-location-arrow",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("location-arrow")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-location-crosshairs",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("location-crosshairs")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-location-dot",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("location-dot")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-location-pin",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("location-pin")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-lock" }),
              _vm._v(" "),
              _c("span", [_vm._v("lock")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-lock-open" }),
              _vm._v(" "),
              _c("span", [_vm._v("lock-open")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-lungs" }),
              _vm._v(" "),
              _c("span", [_vm._v("lungs")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-lungs-virus",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("lungs-virus")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-m" }),
              _vm._v(" "),
              _c("span", [_vm._v("m")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-magnet" }),
              _vm._v(" "),
              _c("span", [_vm._v("magnet")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-magnifying-glass",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("magnifying-glass")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass:
                  "fas fa-lg fa-fw me-10px fa-magnifying-glass-dollar",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("magnifying-glass-dollar")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass:
                  "fas fa-lg fa-fw me-10px fa-magnifying-glass-location",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("magnifying-glass-location")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass:
                  "fas fa-lg fa-fw me-10px fa-magnifying-glass-minus",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("magnifying-glass-minus")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-magnifying-glass-plus",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("magnifying-glass-plus")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-manat-sign" }),
              _vm._v(" "),
              _c("span", [_vm._v("manat-sign")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-map" }),
              _vm._v(" "),
              _c("span", [_vm._v("map")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-map-location",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("map-location")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-map-location-dot",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("map-location-dot")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-map-pin" }),
              _vm._v(" "),
              _c("span", [_vm._v("map-pin")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-marker" }),
              _vm._v(" "),
              _c("span", [_vm._v("marker")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-mars" }),
              _vm._v(" "),
              _c("span", [_vm._v("mars")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-mars-and-venus",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("mars-and-venus")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-mars-double",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("mars-double")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-mars-stroke",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("mars-stroke")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-mars-stroke-right",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("mars-stroke-right")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-mars-stroke-up",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("mars-stroke-up")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-martini-glass",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("martini-glass")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-martini-glass-citrus",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("martini-glass-citrus")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-martini-glass-empty",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("martini-glass-empty")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-mask" }),
              _vm._v(" "),
              _c("span", [_vm._v("mask")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-mask-face" }),
              _vm._v(" "),
              _c("span", [_vm._v("mask-face")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-masks-theater",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("masks-theater")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-maximize" }),
              _vm._v(" "),
              _c("span", [_vm._v("maximize")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-medal" }),
              _vm._v(" "),
              _c("span", [_vm._v("medal")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-memory" }),
              _vm._v(" "),
              _c("span", [_vm._v("memory")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-menorah" }),
              _vm._v(" "),
              _c("span", [_vm._v("menorah")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-mercury" }),
              _vm._v(" "),
              _c("span", [_vm._v("mercury")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-message" }),
              _vm._v(" "),
              _c("span", [_vm._v("message")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-meteor" }),
              _vm._v(" "),
              _c("span", [_vm._v("meteor")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-microchip" }),
              _vm._v(" "),
              _c("span", [_vm._v("microchip")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-microphone" }),
              _vm._v(" "),
              _c("span", [_vm._v("microphone")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-microphone-lines",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("microphone-lines")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass:
                  "fas fa-lg fa-fw me-10px fa-microphone-lines-slash",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("microphone-lines-slash")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-microphone-slash",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("microphone-slash")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-microscope" }),
              _vm._v(" "),
              _c("span", [_vm._v("microscope")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-mill-sign" }),
              _vm._v(" "),
              _c("span", [_vm._v("mill-sign")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-minimize" }),
              _vm._v(" "),
              _c("span", [_vm._v("minimize")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-minus" }),
              _vm._v(" "),
              _c("span", [_vm._v("minus")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-mitten" }),
              _vm._v(" "),
              _c("span", [_vm._v("mitten")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-mobile-button",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("mobile-button")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-mobile-screen-button",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("mobile-screen-button")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-money-bill" }),
              _vm._v(" "),
              _c("span", [_vm._v("money-bill")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-money-bill-1",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("money-bill-1")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-money-bill-1-wave",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("money-bill-1-wave")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-money-bill-wave",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("money-bill-wave")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-money-check",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("money-check")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-money-check-dollar",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("money-check-dollar")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-monument" }),
              _vm._v(" "),
              _c("span", [_vm._v("monument")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-moon" }),
              _vm._v(" "),
              _c("span", [_vm._v("moon")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-mortar-pestle",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("mortar-pestle")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-mosque" }),
              _vm._v(" "),
              _c("span", [_vm._v("mosque")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-motorcycle" }),
              _vm._v(" "),
              _c("span", [_vm._v("motorcycle")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-mountain" }),
              _vm._v(" "),
              _c("span", [_vm._v("mountain")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-mug-hot" }),
              _vm._v(" "),
              _c("span", [_vm._v("mug-hot")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-mug-saucer" }),
              _vm._v(" "),
              _c("span", [_vm._v("mug-saucer")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-music" }),
              _vm._v(" "),
              _c("span", [_vm._v("music")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-n" }),
              _vm._v(" "),
              _c("span", [_vm._v("n")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-naira-sign" }),
              _vm._v(" "),
              _c("span", [_vm._v("naira-sign")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-network-wired",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("network-wired")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-neuter" }),
              _vm._v(" "),
              _c("span", [_vm._v("neuter")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-newspaper" }),
              _vm._v(" "),
              _c("span", [_vm._v("newspaper")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-not-equal" }),
              _vm._v(" "),
              _c("span", [_vm._v("not-equal")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-note-sticky",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("note-sticky")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-notes-medical",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("notes-medical")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-o" }),
              _vm._v(" "),
              _c("span", [_vm._v("o")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-object-group",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("object-group")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-object-ungroup",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("object-ungroup")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-oil-can" }),
              _vm._v(" "),
              _c("span", [_vm._v("oil-can")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-om" }),
              _vm._v(" "),
              _c("span", [_vm._v("om")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-otter" }),
              _vm._v(" "),
              _c("span", [_vm._v("otter")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-outdent" }),
              _vm._v(" "),
              _c("span", [_vm._v("outdent")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-p" }),
              _vm._v(" "),
              _c("span", [_vm._v("p")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-pager" }),
              _vm._v(" "),
              _c("span", [_vm._v("pager")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-paint-brush",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("paint-brush")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-paint-roller",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("paint-roller")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-palette" }),
              _vm._v(" "),
              _c("span", [_vm._v("palette")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-pallet" }),
              _vm._v(" "),
              _c("span", [_vm._v("pallet")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-panorama" }),
              _vm._v(" "),
              _c("span", [_vm._v("panorama")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-paper-plane",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("paper-plane")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-paperclip" }),
              _vm._v(" "),
              _c("span", [_vm._v("paperclip")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-parachute-box",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("parachute-box")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-paragraph" }),
              _vm._v(" "),
              _c("span", [_vm._v("paragraph")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-passport" }),
              _vm._v(" "),
              _c("span", [_vm._v("passport")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-paste" }),
              _vm._v(" "),
              _c("span", [_vm._v("paste")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-pause" }),
              _vm._v(" "),
              _c("span", [_vm._v("pause")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-paw" }),
              _vm._v(" "),
              _c("span", [_vm._v("paw")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-peace" }),
              _vm._v(" "),
              _c("span", [_vm._v("peace")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-pen" }),
              _vm._v(" "),
              _c("span", [_vm._v("pen")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-pen-clip" }),
              _vm._v(" "),
              _c("span", [_vm._v("pen-clip")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-pen-fancy" }),
              _vm._v(" "),
              _c("span", [_vm._v("pen-fancy")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-pen-nib" }),
              _vm._v(" "),
              _c("span", [_vm._v("pen-nib")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-pen-ruler" }),
              _vm._v(" "),
              _c("span", [_vm._v("pen-ruler")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-pen-to-square",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("pen-to-square")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-pencil" }),
              _vm._v(" "),
              _c("span", [_vm._v("pencil")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass:
                  "fas fa-lg fa-fw me-10px fa-people-arrows-left-right",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("people-arrows-left-right")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-people-carry-box",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("people-carry-box")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-pepper-hot" }),
              _vm._v(" "),
              _c("span", [_vm._v("pepper-hot")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-percent" }),
              _vm._v(" "),
              _c("span", [_vm._v("percent")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-person" }),
              _vm._v(" "),
              _c("span", [_vm._v("person")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-person-biking",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("person-biking")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-person-booth",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("person-booth")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-person-dots-from-line",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("person-dots-from-line")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-person-dress",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("person-dress")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-person-hiking",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("person-hiking")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-person-praying",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("person-praying")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-person-running",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("person-running")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-person-skating",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("person-skating")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-person-skiing",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("person-skiing")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-person-skiing-nordic",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("person-skiing-nordic")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-person-snowboarding",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("person-snowboarding")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-person-swimming",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("person-swimming")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-person-walking",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("person-walking")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass:
                  "fas fa-lg fa-fw me-10px fa-person-walking-with-cane",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("person-walking-with-cane")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-peseta-sign",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("peseta-sign")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-peso-sign" }),
              _vm._v(" "),
              _c("span", [_vm._v("peso-sign")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-phone" }),
              _vm._v(" "),
              _c("span", [_vm._v("phone")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-phone-flip" }),
              _vm._v(" "),
              _c("span", [_vm._v("phone-flip")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-phone-slash",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("phone-slash")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-phone-volume",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("phone-volume")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-photo-film" }),
              _vm._v(" "),
              _c("span", [_vm._v("photo-film")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-piggy-bank" }),
              _vm._v(" "),
              _c("span", [_vm._v("piggy-bank")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-pills" }),
              _vm._v(" "),
              _c("span", [_vm._v("pills")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-pizza-slice",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("pizza-slice")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-place-of-worship",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("place-of-worship")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-plane" }),
              _vm._v(" "),
              _c("span", [_vm._v("plane")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-plane-arrival",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("plane-arrival")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-plane-departure",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("plane-departure")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-plane-slash",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("plane-slash")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-play" }),
              _vm._v(" "),
              _c("span", [_vm._v("play")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-plug" }),
              _vm._v(" "),
              _c("span", [_vm._v("plug")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-plus" }),
              _vm._v(" "),
              _c("span", [_vm._v("plus")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-plus-minus" }),
              _vm._v(" "),
              _c("span", [_vm._v("plus-minus")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-podcast" }),
              _vm._v(" "),
              _c("span", [_vm._v("podcast")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-poo" }),
              _vm._v(" "),
              _c("span", [_vm._v("poo")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-poo-storm" }),
              _vm._v(" "),
              _c("span", [_vm._v("poo-storm")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-poop" }),
              _vm._v(" "),
              _c("span", [_vm._v("poop")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-power-off" }),
              _vm._v(" "),
              _c("span", [_vm._v("power-off")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-prescription",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("prescription")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-prescription-bottle",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("prescription-bottle")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass:
                  "fas fa-lg fa-fw me-10px fa-prescription-bottle-medical",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("prescription-bottle-medical")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-print" }),
              _vm._v(" "),
              _c("span", [_vm._v("print")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-pump-medical",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("pump-medical")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-pump-soap" }),
              _vm._v(" "),
              _c("span", [_vm._v("pump-soap")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-puzzle-piece",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("puzzle-piece")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-q" }),
              _vm._v(" "),
              _c("span", [_vm._v("q")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-qrcode" }),
              _vm._v(" "),
              _c("span", [_vm._v("qrcode")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-question" }),
              _vm._v(" "),
              _c("span", [_vm._v("question")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-quidditch" }),
              _vm._v(" "),
              _c("span", [_vm._v("quidditch")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-quote-left" }),
              _vm._v(" "),
              _c("span", [_vm._v("quote-left")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-quote-right",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("quote-right")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-r" }),
              _vm._v(" "),
              _c("span", [_vm._v("r")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-radiation" }),
              _vm._v(" "),
              _c("span", [_vm._v("radiation")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-rainbow" }),
              _vm._v(" "),
              _c("span", [_vm._v("rainbow")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-receipt" }),
              _vm._v(" "),
              _c("span", [_vm._v("receipt")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-record-vinyl",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("record-vinyl")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-rectangle-ad",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("rectangle-ad")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-rectangle-list",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("rectangle-list")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-rectangle-xmark",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("rectangle-xmark")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-recycle" }),
              _vm._v(" "),
              _c("span", [_vm._v("recycle")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-registered" }),
              _vm._v(" "),
              _c("span", [_vm._v("registered")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-repeat" }),
              _vm._v(" "),
              _c("span", [_vm._v("repeat")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-reply" }),
              _vm._v(" "),
              _c("span", [_vm._v("reply")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-reply-all" }),
              _vm._v(" "),
              _c("span", [_vm._v("reply-all")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-republican" }),
              _vm._v(" "),
              _c("span", [_vm._v("republican")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-restroom" }),
              _vm._v(" "),
              _c("span", [_vm._v("restroom")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-retweet" }),
              _vm._v(" "),
              _c("span", [_vm._v("retweet")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-ribbon" }),
              _vm._v(" "),
              _c("span", [_vm._v("ribbon")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-right-from-bracket",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("right-from-bracket")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-right-left" }),
              _vm._v(" "),
              _c("span", [_vm._v("right-left")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-right-long" }),
              _vm._v(" "),
              _c("span", [_vm._v("right-long")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-right-to-bracket",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("right-to-bracket")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-ring" }),
              _vm._v(" "),
              _c("span", [_vm._v("ring")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-road" }),
              _vm._v(" "),
              _c("span", [_vm._v("road")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-robot" }),
              _vm._v(" "),
              _c("span", [_vm._v("robot")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-rocket" }),
              _vm._v(" "),
              _c("span", [_vm._v("rocket")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-rotate" }),
              _vm._v(" "),
              _c("span", [_vm._v("rotate")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-rotate-left",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("rotate-left")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-route" }),
              _vm._v(" "),
              _c("span", [_vm._v("route")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-rss" }),
              _vm._v(" "),
              _c("span", [_vm._v("rss")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-ruble-sign" }),
              _vm._v(" "),
              _c("span", [_vm._v("ruble-sign")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-ruler" }),
              _vm._v(" "),
              _c("span", [_vm._v("ruler")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-ruler-combined",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("ruler-combined")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-ruler-horizontal",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("ruler-horizontal")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-ruler-vertical",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("ruler-vertical")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-rupee-sign" }),
              _vm._v(" "),
              _c("span", [_vm._v("rupee-sign")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-rupiah-sign",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("rupiah-sign")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-s" }),
              _vm._v(" "),
              _c("span", [_vm._v("s")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-sailboat" }),
              _vm._v(" "),
              _c("span", [_vm._v("sailboat")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-satellite" }),
              _vm._v(" "),
              _c("span", [_vm._v("satellite")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-satellite-dish",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("satellite-dish")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-scale-balanced",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("scale-balanced")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-scale-unbalanced",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("scale-unbalanced")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-scale-unbalanced-flip",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("scale-unbalanced-flip")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-school" }),
              _vm._v(" "),
              _c("span", [_vm._v("school")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-scissors" }),
              _vm._v(" "),
              _c("span", [_vm._v("scissors")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-screwdriver",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("screwdriver")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-screwdriver-wrench",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("screwdriver-wrench")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-scroll" }),
              _vm._v(" "),
              _c("span", [_vm._v("scroll")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-scroll-torah",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("scroll-torah")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-sd-card" }),
              _vm._v(" "),
              _c("span", [_vm._v("sd-card")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-section" }),
              _vm._v(" "),
              _c("span", [_vm._v("section")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-seedling" }),
              _vm._v(" "),
              _c("span", [_vm._v("seedling")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-server" }),
              _vm._v(" "),
              _c("span", [_vm._v("server")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-shapes" }),
              _vm._v(" "),
              _c("span", [_vm._v("shapes")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-share" }),
              _vm._v(" "),
              _c("span", [_vm._v("share")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-share-from-square",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("share-from-square")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-share-nodes",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("share-nodes")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-shekel-sign",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("shekel-sign")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-shield-blank",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("shield-blank")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-shield-virus",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("shield-virus")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-ship" }),
              _vm._v(" "),
              _c("span", [_vm._v("ship")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-shirt" }),
              _vm._v(" "),
              _c("span", [_vm._v("shirt")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-shoe-prints",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("shoe-prints")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-shop" }),
              _vm._v(" "),
              _c("span", [_vm._v("shop")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-shop-slash" }),
              _vm._v(" "),
              _c("span", [_vm._v("shop-slash")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-shower" }),
              _vm._v(" "),
              _c("span", [_vm._v("shower")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-shuffle" }),
              _vm._v(" "),
              _c("span", [_vm._v("shuffle")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-shuttle-space",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("shuttle-space")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-sign-hanging",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("sign-hanging")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-signal" }),
              _vm._v(" "),
              _c("span", [_vm._v("signal")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-signature" }),
              _vm._v(" "),
              _c("span", [_vm._v("signature")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-signs-post" }),
              _vm._v(" "),
              _c("span", [_vm._v("signs-post")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-sim-card" }),
              _vm._v(" "),
              _c("span", [_vm._v("sim-card")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-sink" }),
              _vm._v(" "),
              _c("span", [_vm._v("sink")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-sitemap" }),
              _vm._v(" "),
              _c("span", [_vm._v("sitemap")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-skull" }),
              _vm._v(" "),
              _c("span", [_vm._v("skull")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-skull-crossbones",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("skull-crossbones")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-slash" }),
              _vm._v(" "),
              _c("span", [_vm._v("slash")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-sleigh" }),
              _vm._v(" "),
              _c("span", [_vm._v("sleigh")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-sliders" }),
              _vm._v(" "),
              _c("span", [_vm._v("sliders")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-smog" }),
              _vm._v(" "),
              _c("span", [_vm._v("smog")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-smoking" }),
              _vm._v(" "),
              _c("span", [_vm._v("smoking")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-snowflake" }),
              _vm._v(" "),
              _c("span", [_vm._v("snowflake")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-snowman" }),
              _vm._v(" "),
              _c("span", [_vm._v("snowman")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-snowplow" }),
              _vm._v(" "),
              _c("span", [_vm._v("snowplow")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-soap" }),
              _vm._v(" "),
              _c("span", [_vm._v("soap")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-socks" }),
              _vm._v(" "),
              _c("span", [_vm._v("socks")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-solar-panel",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("solar-panel")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-sort" }),
              _vm._v(" "),
              _c("span", [_vm._v("sort")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-sort-down" }),
              _vm._v(" "),
              _c("span", [_vm._v("sort-down")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-sort-up" }),
              _vm._v(" "),
              _c("span", [_vm._v("sort-up")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-spa" }),
              _vm._v(" "),
              _c("span", [_vm._v("spa")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass:
                  "fas fa-lg fa-fw me-10px fa-spaghetti-monster-flying",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("spaghetti-monster-flying")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-spell-check",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("spell-check")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-spider" }),
              _vm._v(" "),
              _c("span", [_vm._v("spider")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-spinner" }),
              _vm._v(" "),
              _c("span", [_vm._v("spinner")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-splotch" }),
              _vm._v(" "),
              _c("span", [_vm._v("splotch")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-spoon" }),
              _vm._v(" "),
              _c("span", [_vm._v("spoon")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-spray-can" }),
              _vm._v(" "),
              _c("span", [_vm._v("spray-can")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-spray-can-sparkles",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("spray-can-sparkles")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-square" }),
              _vm._v(" "),
              _c("span", [_vm._v("square")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-square-caret-down",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("square-caret-down")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-square-caret-left",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("square-caret-left")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-square-caret-right",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("square-caret-right")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-square-caret-up",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("square-caret-up")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-square-check",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("square-check")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-square-envelope",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("square-envelope")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-square-full",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("square-full")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-square-h" }),
              _vm._v(" "),
              _c("span", [_vm._v("square-h")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-square-minus",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("square-minus")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-square-parking",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("square-parking")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-square-pen" }),
              _vm._v(" "),
              _c("span", [_vm._v("square-pen")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-square-phone",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("square-phone")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-square-phone-flip",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("square-phone-flip")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-square-plus",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("square-plus")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass:
                  "fas fa-lg fa-fw me-10px fa-square-poll-horizontal",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("square-poll-horizontal")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-square-poll-vertical",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("square-poll-vertical")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-square-root-variable",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("square-root-variable")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-square-rss" }),
              _vm._v(" "),
              _c("span", [_vm._v("square-rss")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-square-share-nodes",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("square-share-nodes")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-square-up-right",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("square-up-right")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-stairs" }),
              _vm._v(" "),
              _c("span", [_vm._v("stairs")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-stamp" }),
              _vm._v(" "),
              _c("span", [_vm._v("stamp")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-star" }),
              _vm._v(" "),
              _c("span", [_vm._v("star")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-star-and-crescent",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("star-and-crescent")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-star-half" }),
              _vm._v(" "),
              _c("span", [_vm._v("star-half")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-star-half-stroke",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("star-half-stroke")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-star-of-david",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("star-of-david")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-star-of-life",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("star-of-life")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-sterling-sign",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("sterling-sign")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-stethoscope",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("stethoscope")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-stop" }),
              _vm._v(" "),
              _c("span", [_vm._v("stop")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-stopwatch" }),
              _vm._v(" "),
              _c("span", [_vm._v("stopwatch")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-stopwatch-20",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("stopwatch-20")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-store" }),
              _vm._v(" "),
              _c("span", [_vm._v("store")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-store-slash",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("store-slash")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-street-view",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("street-view")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-strikethrough",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("strikethrough")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-stroopwafel",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("stroopwafel")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-subscript" }),
              _vm._v(" "),
              _c("span", [_vm._v("subscript")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-suitcase" }),
              _vm._v(" "),
              _c("span", [_vm._v("suitcase")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-suitcase-medical",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("suitcase-medical")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-suitcase-rolling",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("suitcase-rolling")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-sun" }),
              _vm._v(" "),
              _c("span", [_vm._v("sun")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-superscript",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("superscript")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-swatchbook" }),
              _vm._v(" "),
              _c("span", [_vm._v("swatchbook")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-synagogue" }),
              _vm._v(" "),
              _c("span", [_vm._v("synagogue")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-syringe" }),
              _vm._v(" "),
              _c("span", [_vm._v("syringe")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-t" }),
              _vm._v(" "),
              _c("span", [_vm._v("t")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-table" }),
              _vm._v(" "),
              _c("span", [_vm._v("table")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-table-cells",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("table-cells")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-table-cells-large",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("table-cells-large")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-table-columns",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("table-columns")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-table-list" }),
              _vm._v(" "),
              _c("span", [_vm._v("table-list")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass:
                  "fas fa-lg fa-fw me-10px fa-table-tennis-paddle-ball",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("table-tennis-paddle-ball")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-tablet-button",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("tablet-button")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-tablet-screen-button",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("tablet-screen-button")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-tablets" }),
              _vm._v(" "),
              _c("span", [_vm._v("tablets")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-tachograph-digital",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("tachograph-digital")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-tag" }),
              _vm._v(" "),
              _c("span", [_vm._v("tag")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-tags" }),
              _vm._v(" "),
              _c("span", [_vm._v("tags")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-tape" }),
              _vm._v(" "),
              _c("span", [_vm._v("tape")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-taxi" }),
              _vm._v(" "),
              _c("span", [_vm._v("taxi")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-teeth" }),
              _vm._v(" "),
              _c("span", [_vm._v("teeth")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-teeth-open" }),
              _vm._v(" "),
              _c("span", [_vm._v("teeth-open")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-temperature-empty",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("temperature-empty")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-temperature-full",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("temperature-full")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-temperature-half",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("temperature-half")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-temperature-high",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("temperature-high")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-temperature-low",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("temperature-low")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-temperature-quarter",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("temperature-quarter")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass:
                  "fas fa-lg fa-fw me-10px fa-temperature-three-quarters",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("temperature-three-quarters")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-tenge-sign" }),
              _vm._v(" "),
              _c("span", [_vm._v("tenge-sign")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-terminal" }),
              _vm._v(" "),
              _c("span", [_vm._v("terminal")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-text-height",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("text-height")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-text-slash" }),
              _vm._v(" "),
              _c("span", [_vm._v("text-slash")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-text-width" }),
              _vm._v(" "),
              _c("span", [_vm._v("text-width")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-thermometer",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("thermometer")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-thumbs-down",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("thumbs-down")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-thumbs-up" }),
              _vm._v(" "),
              _c("span", [_vm._v("thumbs-up")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-thumbtack" }),
              _vm._v(" "),
              _c("span", [_vm._v("thumbtack")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-ticket-simple",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("ticket-simple")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-timeline" }),
              _vm._v(" "),
              _c("span", [_vm._v("timeline")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-toggle-off" }),
              _vm._v(" "),
              _c("span", [_vm._v("toggle-off")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-toggle-on" }),
              _vm._v(" "),
              _c("span", [_vm._v("toggle-on")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-toilet" }),
              _vm._v(" "),
              _c("span", [_vm._v("toilet")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-toilet-paper",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("toilet-paper")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-toilet-paper-slash",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("toilet-paper-slash")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-toolbox" }),
              _vm._v(" "),
              _c("span", [_vm._v("toolbox")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-tooth" }),
              _vm._v(" "),
              _c("span", [_vm._v("tooth")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-torii-gate" }),
              _vm._v(" "),
              _c("span", [_vm._v("torii-gate")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-tower-broadcast",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("tower-broadcast")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-tractor" }),
              _vm._v(" "),
              _c("span", [_vm._v("tractor")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-trademark" }),
              _vm._v(" "),
              _c("span", [_vm._v("trademark")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-traffic-light",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("traffic-light")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-trailer" }),
              _vm._v(" "),
              _c("span", [_vm._v("trailer")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-train" }),
              _vm._v(" "),
              _c("span", [_vm._v("train")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-train-subway",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("train-subway")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-train-tram" }),
              _vm._v(" "),
              _c("span", [_vm._v("train-tram")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-transgender",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("transgender")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-trash" }),
              _vm._v(" "),
              _c("span", [_vm._v("trash")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-trash-arrow-up",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("trash-arrow-up")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-trash-can" }),
              _vm._v(" "),
              _c("span", [_vm._v("trash-can")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-trash-can-arrow-up",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("trash-can-arrow-up")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-tree" }),
              _vm._v(" "),
              _c("span", [_vm._v("tree")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-triangle-exclamation",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("triangle-exclamation")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-trophy" }),
              _vm._v(" "),
              _c("span", [_vm._v("trophy")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-truck" }),
              _vm._v(" "),
              _c("span", [_vm._v("truck")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-truck-fast" }),
              _vm._v(" "),
              _c("span", [_vm._v("truck-fast")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-truck-medical",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("truck-medical")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-truck-monster",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("truck-monster")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-truck-moving",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("truck-moving")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-truck-pickup",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("truck-pickup")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-truck-ramp-box",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("truck-ramp-box")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-tty" }),
              _vm._v(" "),
              _c("span", [_vm._v("tty")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-turkish-lira-sign",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("turkish-lira-sign")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-turn-down" }),
              _vm._v(" "),
              _c("span", [_vm._v("turn-down")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-turn-up" }),
              _vm._v(" "),
              _c("span", [_vm._v("turn-up")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-tv" }),
              _vm._v(" "),
              _c("span", [_vm._v("tv")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-u" }),
              _vm._v(" "),
              _c("span", [_vm._v("u")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-umbrella" }),
              _vm._v(" "),
              _c("span", [_vm._v("umbrella")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-umbrella-beach",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("umbrella-beach")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-underline" }),
              _vm._v(" "),
              _c("span", [_vm._v("underline")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-universal-access",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("universal-access")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-unlock" }),
              _vm._v(" "),
              _c("span", [_vm._v("unlock")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-unlock-keyhole",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("unlock-keyhole")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-up-down" }),
              _vm._v(" "),
              _c("span", [_vm._v("up-down")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-up-down-left-right",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("up-down-left-right")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-up-long" }),
              _vm._v(" "),
              _c("span", [_vm._v("up-long")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass:
                  "fas fa-lg fa-fw me-10px fa-up-right-and-down-left-from-center",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("up-right-and-down-left-from-center")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-up-right-from-square",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("up-right-from-square")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-upload" }),
              _vm._v(" "),
              _c("span", [_vm._v("upload")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-user" }),
              _vm._v(" "),
              _c("span", [_vm._v("user")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-user-astronaut",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("user-astronaut")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-user-check" }),
              _vm._v(" "),
              _c("span", [_vm._v("user-check")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-user-clock" }),
              _vm._v(" "),
              _c("span", [_vm._v("user-clock")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-user-doctor",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("user-doctor")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-user-gear" }),
              _vm._v(" "),
              _c("span", [_vm._v("user-gear")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-user-graduate",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("user-graduate")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-user-group" }),
              _vm._v(" "),
              _c("span", [_vm._v("user-group")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-user-injured",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("user-injured")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-user-large" }),
              _vm._v(" "),
              _c("span", [_vm._v("user-large")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-user-large-slash",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("user-large-slash")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-user-lock" }),
              _vm._v(" "),
              _c("span", [_vm._v("user-lock")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-user-minus" }),
              _vm._v(" "),
              _c("span", [_vm._v("user-minus")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-user-ninja" }),
              _vm._v(" "),
              _c("span", [_vm._v("user-ninja")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-user-nurse" }),
              _vm._v(" "),
              _c("span", [_vm._v("user-nurse")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-user-pen" }),
              _vm._v(" "),
              _c("span", [_vm._v("user-pen")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-user-plus" }),
              _vm._v(" "),
              _c("span", [_vm._v("user-plus")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-user-secret",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("user-secret")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-user-shield",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("user-shield")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-user-slash" }),
              _vm._v(" "),
              _c("span", [_vm._v("user-slash")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-user-tag" }),
              _vm._v(" "),
              _c("span", [_vm._v("user-tag")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-user-tie" }),
              _vm._v(" "),
              _c("span", [_vm._v("user-tie")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-user-xmark" }),
              _vm._v(" "),
              _c("span", [_vm._v("user-xmark")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-users" }),
              _vm._v(" "),
              _c("span", [_vm._v("users")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-users-gear" }),
              _vm._v(" "),
              _c("span", [_vm._v("users-gear")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-users-slash",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("users-slash")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-utensils" }),
              _vm._v(" "),
              _c("span", [_vm._v("utensils")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-v" }),
              _vm._v(" "),
              _c("span", [_vm._v("v")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-van-shuttle",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("van-shuttle")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-vault" }),
              _vm._v(" "),
              _c("span", [_vm._v("vault")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-vector-square",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("vector-square")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-venus" }),
              _vm._v(" "),
              _c("span", [_vm._v("venus")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-venus-double",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("venus-double")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-venus-mars" }),
              _vm._v(" "),
              _c("span", [_vm._v("venus-mars")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-vest" }),
              _vm._v(" "),
              _c("span", [_vm._v("vest")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-vest-patches",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("vest-patches")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-vial" }),
              _vm._v(" "),
              _c("span", [_vm._v("vial")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-vials" }),
              _vm._v(" "),
              _c("span", [_vm._v("vials")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-video" }),
              _vm._v(" "),
              _c("span", [_vm._v("video")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-video-slash",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("video-slash")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-vihara" }),
              _vm._v(" "),
              _c("span", [_vm._v("vihara")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-virus" }),
              _vm._v(" "),
              _c("span", [_vm._v("virus")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-virus-slash",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("virus-slash")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-viruses" }),
              _vm._v(" "),
              _c("span", [_vm._v("viruses")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-voicemail" }),
              _vm._v(" "),
              _c("span", [_vm._v("voicemail")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-volleyball" }),
              _vm._v(" "),
              _c("span", [_vm._v("volleyball")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-volume-high",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("volume-high")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-volume-low" }),
              _vm._v(" "),
              _c("span", [_vm._v("volume-low")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-volume-off" }),
              _vm._v(" "),
              _c("span", [_vm._v("volume-off")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-volume-xmark",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("volume-xmark")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-vr-cardboard",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("vr-cardboard")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-w" }),
              _vm._v(" "),
              _c("span", [_vm._v("w")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-wallet" }),
              _vm._v(" "),
              _c("span", [_vm._v("wallet")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-wand-magic" }),
              _vm._v(" "),
              _c("span", [_vm._v("wand-magic")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-warehouse" }),
              _vm._v(" "),
              _c("span", [_vm._v("warehouse")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-water" }),
              _vm._v(" "),
              _c("span", [_vm._v("water")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-water-ladder",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("water-ladder")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-wave-square",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("wave-square")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-weight-hanging",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("weight-hanging")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-weight-scale",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("weight-scale")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-wheelchair" }),
              _vm._v(" "),
              _c("span", [_vm._v("wheelchair")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-whiskey-glass",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("whiskey-glass")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-wifi" }),
              _vm._v(" "),
              _c("span", [_vm._v("wifi")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-wind" }),
              _vm._v(" "),
              _c("span", [_vm._v("wind")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-window-maximize",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("window-maximize")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-window-minimize",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("window-minimize")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-window-restore",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("window-restore")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-wine-bottle",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("wine-bottle")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-wine-glass" }),
              _vm._v(" "),
              _c("span", [_vm._v("wine-glass")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw me-10px fa-wine-glass-empty",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("wine-glass-empty")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-won-sign" }),
              _vm._v(" "),
              _c("span", [_vm._v("won-sign")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-wrench" }),
              _vm._v(" "),
              _c("span", [_vm._v("wrench")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-x" }),
              _vm._v(" "),
              _c("span", [_vm._v("x")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-x-ray" }),
              _vm._v(" "),
              _c("span", [_vm._v("x-ray")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-xmark" }),
              _vm._v(" "),
              _c("span", [_vm._v("xmark")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-y" }),
              _vm._v(" "),
              _c("span", [_vm._v("y")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-yen-sign" }),
              _vm._v(" "),
              _c("span", [_vm._v("yen-sign")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-yin-yang" }),
              _vm._v(" "),
              _c("span", [_vm._v("yin-yang")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw me-10px fa-z" }),
              _vm._v(" "),
              _c("span", [_vm._v("z")]),
            ]
          ),
        ]),
      ]),
      _c("div", { staticClass: "col-xl-6" }, [
        _c("h3", { staticClass: "mb-10px" }, [_c("b", [_vm._v("Regular")])]),
        _c("p", { staticClass: "mb-20px" }, [
          _vm._v(" Regular type Font Awesome Icon prefix "),
          _c("code", [_vm._v("far fa-*")]),
        ]),
        _c("div", { staticClass: "row mb-20px fs-13px" }, [
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-address-book",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("address-book")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-address-card",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("address-card")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-bell" }),
              _vm._v(" "),
              _c("span", [_vm._v("bell")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-bell-slash" }),
              _vm._v(" "),
              _c("span", [_vm._v("bell-slash")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-bookmark" }),
              _vm._v(" "),
              _c("span", [_vm._v("bookmark")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-building" }),
              _vm._v(" "),
              _c("span", [_vm._v("building")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-calendar" }),
              _vm._v(" "),
              _c("span", [_vm._v("calendar")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-calendar-check",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("calendar-check")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-calendar-days",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("calendar-days")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-calendar-minus",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("calendar-minus")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-calendar-plus",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("calendar-plus")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-calendar-xmark",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("calendar-xmark")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-chart-bar" }),
              _vm._v(" "),
              _c("span", [_vm._v("chart-bar")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-chess-bishop",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("chess-bishop")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-chess-king" }),
              _vm._v(" "),
              _c("span", [_vm._v("chess-king")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-chess-knight",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("chess-knight")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-chess-pawn" }),
              _vm._v(" "),
              _c("span", [_vm._v("chess-pawn")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-chess-queen",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("chess-queen")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-chess-rook" }),
              _vm._v(" "),
              _c("span", [_vm._v("chess-rook")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-circle" }),
              _vm._v(" "),
              _c("span", [_vm._v("circle")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-circle-check",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("circle-check")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-circle-dot" }),
              _vm._v(" "),
              _c("span", [_vm._v("circle-dot")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-circle-down",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("circle-down")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-circle-left",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("circle-left")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-circle-pause",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("circle-pause")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-circle-play",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("circle-play")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-circle-question",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("circle-question")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-circle-right",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("circle-right")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-circle-stop",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("circle-stop")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-circle-up" }),
              _vm._v(" "),
              _c("span", [_vm._v("circle-up")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-circle-user",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("circle-user")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-circle-xmark",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("circle-xmark")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-clipboard" }),
              _vm._v(" "),
              _c("span", [_vm._v("clipboard")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-clock" }),
              _vm._v(" "),
              _c("span", [_vm._v("clock")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-clone" }),
              _vm._v(" "),
              _c("span", [_vm._v("clone")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-closed-captioning",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("closed-captioning")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-comment" }),
              _vm._v(" "),
              _c("span", [_vm._v("comment")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-comment-dots",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("comment-dots")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-comments" }),
              _vm._v(" "),
              _c("span", [_vm._v("comments")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-compass" }),
              _vm._v(" "),
              _c("span", [_vm._v("compass")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-copy" }),
              _vm._v(" "),
              _c("span", [_vm._v("copy")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-copyright" }),
              _vm._v(" "),
              _c("span", [_vm._v("copyright")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-credit-card",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("credit-card")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-envelope" }),
              _vm._v(" "),
              _c("span", [_vm._v("envelope")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-envelope-open",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("envelope-open")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-eye" }),
              _vm._v(" "),
              _c("span", [_vm._v("eye")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-eye-slash" }),
              _vm._v(" "),
              _c("span", [_vm._v("eye-slash")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-face-angry" }),
              _vm._v(" "),
              _c("span", [_vm._v("face-angry")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-face-dizzy" }),
              _vm._v(" "),
              _c("span", [_vm._v("face-dizzy")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-face-flushed",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("face-flushed")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-face-frown" }),
              _vm._v(" "),
              _c("span", [_vm._v("face-frown")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-face-frown-open",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("face-frown-open")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-face-grimace",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("face-grimace")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-face-grin" }),
              _vm._v(" "),
              _c("span", [_vm._v("face-grin")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-face-grin-beam",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("face-grin-beam")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-face-grin-beam-sweat",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("face-grin-beam-sweat")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-face-grin-hearts",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("face-grin-hearts")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-face-grin-squint",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("face-grin-squint")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass:
                  "far fa-lg fa-fw me-10px fa-face-grin-squint-tears",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("face-grin-squint-tears")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-face-grin-stars",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("face-grin-stars")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-face-grin-tears",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("face-grin-tears")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-face-grin-tongue",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("face-grin-tongue")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass:
                  "far fa-lg fa-fw me-10px fa-face-grin-tongue-squint",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("face-grin-tongue-squint")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-face-grin-tongue-wink",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("face-grin-tongue-wink")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-face-grin-wide",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("face-grin-wide")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-face-grin-wink",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("face-grin-wink")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-face-kiss" }),
              _vm._v(" "),
              _c("span", [_vm._v("face-kiss")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-face-kiss-beam",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("face-kiss-beam")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-face-kiss-wink-heart",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("face-kiss-wink-heart")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-face-laugh" }),
              _vm._v(" "),
              _c("span", [_vm._v("face-laugh")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-face-laugh-beam",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("face-laugh-beam")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-face-laugh-squint",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("face-laugh-squint")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-face-laugh-wink",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("face-laugh-wink")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-face-meh" }),
              _vm._v(" "),
              _c("span", [_vm._v("face-meh")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-face-meh-blank",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("face-meh-blank")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-face-rolling-eyes",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("face-rolling-eyes")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-face-sad-cry",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("face-sad-cry")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-face-sad-tear",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("face-sad-tear")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-face-smile" }),
              _vm._v(" "),
              _c("span", [_vm._v("face-smile")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-face-smile-beam",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("face-smile-beam")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-face-smile-wink",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("face-smile-wink")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-face-surprise",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("face-surprise")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-face-tired" }),
              _vm._v(" "),
              _c("span", [_vm._v("face-tired")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-file" }),
              _vm._v(" "),
              _c("span", [_vm._v("file")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-file-audio" }),
              _vm._v(" "),
              _c("span", [_vm._v("file-audio")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-file-code" }),
              _vm._v(" "),
              _c("span", [_vm._v("file-code")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-file-excel" }),
              _vm._v(" "),
              _c("span", [_vm._v("file-excel")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-file-image" }),
              _vm._v(" "),
              _c("span", [_vm._v("file-image")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-file-lines" }),
              _vm._v(" "),
              _c("span", [_vm._v("file-lines")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-file-pdf" }),
              _vm._v(" "),
              _c("span", [_vm._v("file-pdf")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-file-powerpoint",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("file-powerpoint")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-file-video" }),
              _vm._v(" "),
              _c("span", [_vm._v("file-video")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-file-word" }),
              _vm._v(" "),
              _c("span", [_vm._v("file-word")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-file-zipper",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("file-zipper")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-flag" }),
              _vm._v(" "),
              _c("span", [_vm._v("flag")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-floppy-disk",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("floppy-disk")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-folder" }),
              _vm._v(" "),
              _c("span", [_vm._v("folder")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-folder-open",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("folder-open")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-font-awesome",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("font-awesome")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-futbol" }),
              _vm._v(" "),
              _c("span", [_vm._v("futbol")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-gem" }),
              _vm._v(" "),
              _c("span", [_vm._v("gem")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-hand" }),
              _vm._v(" "),
              _c("span", [_vm._v("hand")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-hand-back-fist",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("hand-back-fist")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-hand-lizard",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("hand-lizard")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-hand-peace" }),
              _vm._v(" "),
              _c("span", [_vm._v("hand-peace")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-hand-point-down",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("hand-point-down")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-hand-point-left",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("hand-point-left")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-hand-point-right",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("hand-point-right")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-hand-point-up",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("hand-point-up")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-hand-pointer",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("hand-pointer")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-hand-scissors",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("hand-scissors")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-hand-spock" }),
              _vm._v(" "),
              _c("span", [_vm._v("hand-spock")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-handshake" }),
              _vm._v(" "),
              _c("span", [_vm._v("handshake")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-hard-drive" }),
              _vm._v(" "),
              _c("span", [_vm._v("hard-drive")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-heart" }),
              _vm._v(" "),
              _c("span", [_vm._v("heart")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-hospital" }),
              _vm._v(" "),
              _c("span", [_vm._v("hospital")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-hourglass" }),
              _vm._v(" "),
              _c("span", [_vm._v("hourglass")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-id-badge" }),
              _vm._v(" "),
              _c("span", [_vm._v("id-badge")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-id-card" }),
              _vm._v(" "),
              _c("span", [_vm._v("id-card")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-image" }),
              _vm._v(" "),
              _c("span", [_vm._v("image")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-images" }),
              _vm._v(" "),
              _c("span", [_vm._v("images")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-keyboard" }),
              _vm._v(" "),
              _c("span", [_vm._v("keyboard")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-lemon" }),
              _vm._v(" "),
              _c("span", [_vm._v("lemon")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-life-ring" }),
              _vm._v(" "),
              _c("span", [_vm._v("life-ring")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-lightbulb" }),
              _vm._v(" "),
              _c("span", [_vm._v("lightbulb")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-map" }),
              _vm._v(" "),
              _c("span", [_vm._v("map")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-message" }),
              _vm._v(" "),
              _c("span", [_vm._v("message")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-money-bill-1",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("money-bill-1")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-moon" }),
              _vm._v(" "),
              _c("span", [_vm._v("moon")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-newspaper" }),
              _vm._v(" "),
              _c("span", [_vm._v("newspaper")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-note-sticky",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("note-sticky")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-object-group",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("object-group")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-object-ungroup",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("object-ungroup")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-paper-plane",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("paper-plane")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-pen-to-square",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("pen-to-square")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-rectangle-list",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("rectangle-list")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-rectangle-xmark",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("rectangle-xmark")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-registered" }),
              _vm._v(" "),
              _c("span", [_vm._v("registered")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-share-from-square",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("share-from-square")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-snowflake" }),
              _vm._v(" "),
              _c("span", [_vm._v("snowflake")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-square" }),
              _vm._v(" "),
              _c("span", [_vm._v("square")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-square-caret-down",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("square-caret-down")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-square-caret-left",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("square-caret-left")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-square-caret-right",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("square-caret-right")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-square-caret-up",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("square-caret-up")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-square-check",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("square-check")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-square-full",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("square-full")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-square-minus",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("square-minus")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-square-plus",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("square-plus")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-star" }),
              _vm._v(" "),
              _c("span", [_vm._v("star")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-star-half" }),
              _vm._v(" "),
              _c("span", [_vm._v("star-half")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-sun" }),
              _vm._v(" "),
              _c("span", [_vm._v("sun")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-thumbs-down",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("thumbs-down")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-thumbs-up" }),
              _vm._v(" "),
              _c("span", [_vm._v("thumbs-up")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-trash-can" }),
              _vm._v(" "),
              _c("span", [_vm._v("trash-can")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw me-10px fa-user" }),
              _vm._v(" "),
              _c("span", [_vm._v("user")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-window-maximize",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("window-maximize")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-window-minimize",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("window-minimize")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw me-10px fa-window-restore",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("window-restore")]),
            ]
          ),
        ]),
        _c("h3", { staticClass: "mb-10px" }, [_c("b", [_vm._v("Brands")])]),
        _c("p", { staticClass: "mb-20px" }, [
          _vm._v(" Brand type Font Awesome Icon prefix "),
          _c("code", [_vm._v("fab fa-*")]),
        ]),
        _c("div", { staticClass: "row mb-20px fs-13px" }, [
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-42-group" }),
              _vm._v(" "),
              _c("span", [_vm._v("42-group")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-500px" }),
              _vm._v(" "),
              _c("span", [_vm._v("500px")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-accessible-icon",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("accessible-icon")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-accusoft" }),
              _vm._v(" "),
              _c("span", [_vm._v("accusoft")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass:
                  "fab fa-lg fa-fw me-10px fa-acquisitions-incorporated",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("acquisitions-incorporated")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-adn" }),
              _vm._v(" "),
              _c("span", [_vm._v("adn")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-adversal" }),
              _vm._v(" "),
              _c("span", [_vm._v("adversal")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-affiliatetheme",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("affiliatetheme")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-airbnb" }),
              _vm._v(" "),
              _c("span", [_vm._v("airbnb")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-algolia" }),
              _vm._v(" "),
              _c("span", [_vm._v("algolia")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-alipay" }),
              _vm._v(" "),
              _c("span", [_vm._v("alipay")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-amazon" }),
              _vm._v(" "),
              _c("span", [_vm._v("amazon")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-amazon-pay" }),
              _vm._v(" "),
              _c("span", [_vm._v("amazon-pay")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-amilia" }),
              _vm._v(" "),
              _c("span", [_vm._v("amilia")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-android" }),
              _vm._v(" "),
              _c("span", [_vm._v("android")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-angellist" }),
              _vm._v(" "),
              _c("span", [_vm._v("angellist")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-angrycreative",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("angrycreative")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-angular" }),
              _vm._v(" "),
              _c("span", [_vm._v("angular")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-app-store" }),
              _vm._v(" "),
              _c("span", [_vm._v("app-store")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-app-store-ios",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("app-store-ios")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-apper" }),
              _vm._v(" "),
              _c("span", [_vm._v("apper")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-apple" }),
              _vm._v(" "),
              _c("span", [_vm._v("apple")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-apple-pay" }),
              _vm._v(" "),
              _c("span", [_vm._v("apple-pay")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-artstation" }),
              _vm._v(" "),
              _c("span", [_vm._v("artstation")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-asymmetrik" }),
              _vm._v(" "),
              _c("span", [_vm._v("asymmetrik")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-atlassian" }),
              _vm._v(" "),
              _c("span", [_vm._v("atlassian")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-audible" }),
              _vm._v(" "),
              _c("span", [_vm._v("audible")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-autoprefixer",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("autoprefixer")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-avianex" }),
              _vm._v(" "),
              _c("span", [_vm._v("avianex")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-aviato" }),
              _vm._v(" "),
              _c("span", [_vm._v("aviato")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-aws" }),
              _vm._v(" "),
              _c("span", [_vm._v("aws")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-bandcamp" }),
              _vm._v(" "),
              _c("span", [_vm._v("bandcamp")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-battle-net" }),
              _vm._v(" "),
              _c("span", [_vm._v("battle-net")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-behance" }),
              _vm._v(" "),
              _c("span", [_vm._v("behance")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-behance-square",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("behance-square")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-bilibili" }),
              _vm._v(" "),
              _c("span", [_vm._v("bilibili")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-bimobject" }),
              _vm._v(" "),
              _c("span", [_vm._v("bimobject")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-bitbucket" }),
              _vm._v(" "),
              _c("span", [_vm._v("bitbucket")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-bitcoin" }),
              _vm._v(" "),
              _c("span", [_vm._v("bitcoin")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-bity" }),
              _vm._v(" "),
              _c("span", [_vm._v("bity")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-black-tie" }),
              _vm._v(" "),
              _c("span", [_vm._v("black-tie")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-blackberry" }),
              _vm._v(" "),
              _c("span", [_vm._v("blackberry")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-blogger" }),
              _vm._v(" "),
              _c("span", [_vm._v("blogger")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-blogger-b" }),
              _vm._v(" "),
              _c("span", [_vm._v("blogger-b")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-bluetooth" }),
              _vm._v(" "),
              _c("span", [_vm._v("bluetooth")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-bluetooth-b",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("bluetooth-b")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-bootstrap" }),
              _vm._v(" "),
              _c("span", [_vm._v("bootstrap")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-bots" }),
              _vm._v(" "),
              _c("span", [_vm._v("bots")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-btc" }),
              _vm._v(" "),
              _c("span", [_vm._v("btc")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-buffer" }),
              _vm._v(" "),
              _c("span", [_vm._v("buffer")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-buromobelexperte",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("buromobelexperte")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-buy-n-large",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("buy-n-large")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-buysellads" }),
              _vm._v(" "),
              _c("span", [_vm._v("buysellads")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-canadian-maple-leaf",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("canadian-maple-leaf")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-cc-amazon-pay",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("cc-amazon-pay")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-cc-amex" }),
              _vm._v(" "),
              _c("span", [_vm._v("cc-amex")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-cc-apple-pay",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("cc-apple-pay")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-cc-diners-club",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("cc-diners-club")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-cc-discover",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("cc-discover")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-cc-jcb" }),
              _vm._v(" "),
              _c("span", [_vm._v("cc-jcb")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-cc-mastercard",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("cc-mastercard")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-cc-paypal" }),
              _vm._v(" "),
              _c("span", [_vm._v("cc-paypal")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-cc-stripe" }),
              _vm._v(" "),
              _c("span", [_vm._v("cc-stripe")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-cc-visa" }),
              _vm._v(" "),
              _c("span", [_vm._v("cc-visa")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-centercode" }),
              _vm._v(" "),
              _c("span", [_vm._v("centercode")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-centos" }),
              _vm._v(" "),
              _c("span", [_vm._v("centos")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-chrome" }),
              _vm._v(" "),
              _c("span", [_vm._v("chrome")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-chromecast" }),
              _vm._v(" "),
              _c("span", [_vm._v("chromecast")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-cloudflare" }),
              _vm._v(" "),
              _c("span", [_vm._v("cloudflare")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-cloudscale" }),
              _vm._v(" "),
              _c("span", [_vm._v("cloudscale")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-cloudsmith" }),
              _vm._v(" "),
              _c("span", [_vm._v("cloudsmith")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-cloudversify",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("cloudversify")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-cmplid" }),
              _vm._v(" "),
              _c("span", [_vm._v("cmplid")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-codepen" }),
              _vm._v(" "),
              _c("span", [_vm._v("codepen")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-codiepie" }),
              _vm._v(" "),
              _c("span", [_vm._v("codiepie")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-confluence" }),
              _vm._v(" "),
              _c("span", [_vm._v("confluence")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-connectdevelop",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("connectdevelop")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-contao" }),
              _vm._v(" "),
              _c("span", [_vm._v("contao")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-cotton-bureau",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("cotton-bureau")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-cpanel" }),
              _vm._v(" "),
              _c("span", [_vm._v("cpanel")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-creative-commons",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("creative-commons")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-creative-commons-by",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("creative-commons-by")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-creative-commons-nc",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("creative-commons-nc")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass:
                  "fab fa-lg fa-fw me-10px fa-creative-commons-nc-eu",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("creative-commons-nc-eu")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass:
                  "fab fa-lg fa-fw me-10px fa-creative-commons-nc-jp",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("creative-commons-nc-jp")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-creative-commons-nd",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("creative-commons-nd")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-creative-commons-pd",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("creative-commons-pd")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass:
                  "fab fa-lg fa-fw me-10px fa-creative-commons-pd-alt",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("creative-commons-pd-alt")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass:
                  "fab fa-lg fa-fw me-10px fa-creative-commons-remix",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("creative-commons-remix")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-creative-commons-sa",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("creative-commons-sa")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass:
                  "fab fa-lg fa-fw me-10px fa-creative-commons-sampling",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("creative-commons-sampling")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass:
                  "fab fa-lg fa-fw me-10px fa-creative-commons-sampling-plus",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("creative-commons-sampling-plus")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass:
                  "fab fa-lg fa-fw me-10px fa-creative-commons-share",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("creative-commons-share")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-creative-commons-zero",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("creative-commons-zero")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-critical-role",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("critical-role")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-css3" }),
              _vm._v(" "),
              _c("span", [_vm._v("css3")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-css3-alt" }),
              _vm._v(" "),
              _c("span", [_vm._v("css3-alt")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-cuttlefish" }),
              _vm._v(" "),
              _c("span", [_vm._v("cuttlefish")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-d-and-d" }),
              _vm._v(" "),
              _c("span", [_vm._v("d-and-d")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-d-and-d-beyond",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("d-and-d-beyond")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-dailymotion",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("dailymotion")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-dashcube" }),
              _vm._v(" "),
              _c("span", [_vm._v("dashcube")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-deezer" }),
              _vm._v(" "),
              _c("span", [_vm._v("deezer")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-delicious" }),
              _vm._v(" "),
              _c("span", [_vm._v("delicious")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-deploydog" }),
              _vm._v(" "),
              _c("span", [_vm._v("deploydog")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-deskpro" }),
              _vm._v(" "),
              _c("span", [_vm._v("deskpro")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-dev" }),
              _vm._v(" "),
              _c("span", [_vm._v("dev")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-deviantart" }),
              _vm._v(" "),
              _c("span", [_vm._v("deviantart")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-dhl" }),
              _vm._v(" "),
              _c("span", [_vm._v("dhl")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-diaspora" }),
              _vm._v(" "),
              _c("span", [_vm._v("diaspora")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-digg" }),
              _vm._v(" "),
              _c("span", [_vm._v("digg")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-digital-ocean",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("digital-ocean")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-discord" }),
              _vm._v(" "),
              _c("span", [_vm._v("discord")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-discourse" }),
              _vm._v(" "),
              _c("span", [_vm._v("discourse")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-dochub" }),
              _vm._v(" "),
              _c("span", [_vm._v("dochub")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-docker" }),
              _vm._v(" "),
              _c("span", [_vm._v("docker")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-draft2digital",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("draft2digital")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-dribbble" }),
              _vm._v(" "),
              _c("span", [_vm._v("dribbble")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-dribbble-square",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("dribbble-square")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-dropbox" }),
              _vm._v(" "),
              _c("span", [_vm._v("dropbox")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-drupal" }),
              _vm._v(" "),
              _c("span", [_vm._v("drupal")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-dyalog" }),
              _vm._v(" "),
              _c("span", [_vm._v("dyalog")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-earlybirds" }),
              _vm._v(" "),
              _c("span", [_vm._v("earlybirds")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-ebay" }),
              _vm._v(" "),
              _c("span", [_vm._v("ebay")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-edge" }),
              _vm._v(" "),
              _c("span", [_vm._v("edge")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-edge-legacy",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("edge-legacy")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-elementor" }),
              _vm._v(" "),
              _c("span", [_vm._v("elementor")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-ello" }),
              _vm._v(" "),
              _c("span", [_vm._v("ello")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-ember" }),
              _vm._v(" "),
              _c("span", [_vm._v("ember")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-empire" }),
              _vm._v(" "),
              _c("span", [_vm._v("empire")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-envira" }),
              _vm._v(" "),
              _c("span", [_vm._v("envira")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-erlang" }),
              _vm._v(" "),
              _c("span", [_vm._v("erlang")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-ethereum" }),
              _vm._v(" "),
              _c("span", [_vm._v("ethereum")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-etsy" }),
              _vm._v(" "),
              _c("span", [_vm._v("etsy")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-evernote" }),
              _vm._v(" "),
              _c("span", [_vm._v("evernote")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-expeditedssl",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("expeditedssl")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-facebook" }),
              _vm._v(" "),
              _c("span", [_vm._v("facebook")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-facebook-f" }),
              _vm._v(" "),
              _c("span", [_vm._v("facebook-f")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-facebook-messenger",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("facebook-messenger")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-facebook-square",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("facebook-square")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-fantasy-flight-games",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("fantasy-flight-games")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-fedex" }),
              _vm._v(" "),
              _c("span", [_vm._v("fedex")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-fedora" }),
              _vm._v(" "),
              _c("span", [_vm._v("fedora")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-figma" }),
              _vm._v(" "),
              _c("span", [_vm._v("figma")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-firefox" }),
              _vm._v(" "),
              _c("span", [_vm._v("firefox")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-firefox-browser",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("firefox-browser")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-first-order",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("first-order")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-first-order-alt",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("first-order-alt")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-firstdraft" }),
              _vm._v(" "),
              _c("span", [_vm._v("firstdraft")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-flickr" }),
              _vm._v(" "),
              _c("span", [_vm._v("flickr")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-flipboard" }),
              _vm._v(" "),
              _c("span", [_vm._v("flipboard")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-fly" }),
              _vm._v(" "),
              _c("span", [_vm._v("fly")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-font-awesome",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("font-awesome")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-fonticons" }),
              _vm._v(" "),
              _c("span", [_vm._v("fonticons")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-fonticons-fi",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("fonticons-fi")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-fort-awesome",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("fort-awesome")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-fort-awesome-alt",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("fort-awesome-alt")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-forumbee" }),
              _vm._v(" "),
              _c("span", [_vm._v("forumbee")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-foursquare" }),
              _vm._v(" "),
              _c("span", [_vm._v("foursquare")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-free-code-camp",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("free-code-camp")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-freebsd" }),
              _vm._v(" "),
              _c("span", [_vm._v("freebsd")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-fulcrum" }),
              _vm._v(" "),
              _c("span", [_vm._v("fulcrum")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-galactic-republic",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("galactic-republic")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-galactic-senate",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("galactic-senate")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-get-pocket" }),
              _vm._v(" "),
              _c("span", [_vm._v("get-pocket")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-gg" }),
              _vm._v(" "),
              _c("span", [_vm._v("gg")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-gg-circle" }),
              _vm._v(" "),
              _c("span", [_vm._v("gg-circle")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-git" }),
              _vm._v(" "),
              _c("span", [_vm._v("git")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-git-alt" }),
              _vm._v(" "),
              _c("span", [_vm._v("git-alt")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-git-square" }),
              _vm._v(" "),
              _c("span", [_vm._v("git-square")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-github" }),
              _vm._v(" "),
              _c("span", [_vm._v("github")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-github-alt" }),
              _vm._v(" "),
              _c("span", [_vm._v("github-alt")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-github-square",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("github-square")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-gitkraken" }),
              _vm._v(" "),
              _c("span", [_vm._v("gitkraken")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-gitlab" }),
              _vm._v(" "),
              _c("span", [_vm._v("gitlab")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-gitter" }),
              _vm._v(" "),
              _c("span", [_vm._v("gitter")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-glide" }),
              _vm._v(" "),
              _c("span", [_vm._v("glide")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-glide-g" }),
              _vm._v(" "),
              _c("span", [_vm._v("glide-g")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-gofore" }),
              _vm._v(" "),
              _c("span", [_vm._v("gofore")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-golang" }),
              _vm._v(" "),
              _c("span", [_vm._v("golang")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-goodreads" }),
              _vm._v(" "),
              _c("span", [_vm._v("goodreads")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-goodreads-g",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("goodreads-g")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-google" }),
              _vm._v(" "),
              _c("span", [_vm._v("google")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-google-drive",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("google-drive")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-google-pay" }),
              _vm._v(" "),
              _c("span", [_vm._v("google-pay")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-google-play",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("google-play")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-google-plus",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("google-plus")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-google-plus-g",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("google-plus-g")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-google-plus-square",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("google-plus-square")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-google-wallet",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("google-wallet")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-gratipay" }),
              _vm._v(" "),
              _c("span", [_vm._v("gratipay")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-grav" }),
              _vm._v(" "),
              _c("span", [_vm._v("grav")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-gripfire" }),
              _vm._v(" "),
              _c("span", [_vm._v("gripfire")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-grunt" }),
              _vm._v(" "),
              _c("span", [_vm._v("grunt")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-guilded" }),
              _vm._v(" "),
              _c("span", [_vm._v("guilded")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-gulp" }),
              _vm._v(" "),
              _c("span", [_vm._v("gulp")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-hacker-news",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("hacker-news")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-hacker-news-square",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("hacker-news-square")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-hackerrank" }),
              _vm._v(" "),
              _c("span", [_vm._v("hackerrank")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-hips" }),
              _vm._v(" "),
              _c("span", [_vm._v("hips")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-hire-a-helper",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("hire-a-helper")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-hive" }),
              _vm._v(" "),
              _c("span", [_vm._v("hive")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-hooli" }),
              _vm._v(" "),
              _c("span", [_vm._v("hooli")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-hornbill" }),
              _vm._v(" "),
              _c("span", [_vm._v("hornbill")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-hotjar" }),
              _vm._v(" "),
              _c("span", [_vm._v("hotjar")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-houzz" }),
              _vm._v(" "),
              _c("span", [_vm._v("houzz")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-html5" }),
              _vm._v(" "),
              _c("span", [_vm._v("html5")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-hubspot" }),
              _vm._v(" "),
              _c("span", [_vm._v("hubspot")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-ideal" }),
              _vm._v(" "),
              _c("span", [_vm._v("ideal")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-imdb" }),
              _vm._v(" "),
              _c("span", [_vm._v("imdb")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-instagram" }),
              _vm._v(" "),
              _c("span", [_vm._v("instagram")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-instagram-square",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("instagram-square")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-instalod" }),
              _vm._v(" "),
              _c("span", [_vm._v("instalod")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-intercom" }),
              _vm._v(" "),
              _c("span", [_vm._v("intercom")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-internet-explorer",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("internet-explorer")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-invision" }),
              _vm._v(" "),
              _c("span", [_vm._v("invision")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-ioxhost" }),
              _vm._v(" "),
              _c("span", [_vm._v("ioxhost")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-itch-io" }),
              _vm._v(" "),
              _c("span", [_vm._v("itch-io")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-itunes" }),
              _vm._v(" "),
              _c("span", [_vm._v("itunes")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-itunes-note",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("itunes-note")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-java" }),
              _vm._v(" "),
              _c("span", [_vm._v("java")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-jedi-order" }),
              _vm._v(" "),
              _c("span", [_vm._v("jedi-order")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-jenkins" }),
              _vm._v(" "),
              _c("span", [_vm._v("jenkins")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-jira" }),
              _vm._v(" "),
              _c("span", [_vm._v("jira")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-joget" }),
              _vm._v(" "),
              _c("span", [_vm._v("joget")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-joomla" }),
              _vm._v(" "),
              _c("span", [_vm._v("joomla")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-js" }),
              _vm._v(" "),
              _c("span", [_vm._v("js")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-js-square" }),
              _vm._v(" "),
              _c("span", [_vm._v("js-square")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-jsfiddle" }),
              _vm._v(" "),
              _c("span", [_vm._v("jsfiddle")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-kaggle" }),
              _vm._v(" "),
              _c("span", [_vm._v("kaggle")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-keybase" }),
              _vm._v(" "),
              _c("span", [_vm._v("keybase")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-keycdn" }),
              _vm._v(" "),
              _c("span", [_vm._v("keycdn")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-kickstarter",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("kickstarter")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-kickstarter-k",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("kickstarter-k")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-korvue" }),
              _vm._v(" "),
              _c("span", [_vm._v("korvue")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-laravel" }),
              _vm._v(" "),
              _c("span", [_vm._v("laravel")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-lastfm" }),
              _vm._v(" "),
              _c("span", [_vm._v("lastfm")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-lastfm-square",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("lastfm-square")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-leanpub" }),
              _vm._v(" "),
              _c("span", [_vm._v("leanpub")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-less" }),
              _vm._v(" "),
              _c("span", [_vm._v("less")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-line" }),
              _vm._v(" "),
              _c("span", [_vm._v("line")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-linkedin" }),
              _vm._v(" "),
              _c("span", [_vm._v("linkedin")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-linkedin-in",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("linkedin-in")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-linode" }),
              _vm._v(" "),
              _c("span", [_vm._v("linode")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-linux" }),
              _vm._v(" "),
              _c("span", [_vm._v("linux")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-lyft" }),
              _vm._v(" "),
              _c("span", [_vm._v("lyft")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-magento" }),
              _vm._v(" "),
              _c("span", [_vm._v("magento")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-mailchimp" }),
              _vm._v(" "),
              _c("span", [_vm._v("mailchimp")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-mandalorian",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("mandalorian")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-markdown" }),
              _vm._v(" "),
              _c("span", [_vm._v("markdown")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-mastodon" }),
              _vm._v(" "),
              _c("span", [_vm._v("mastodon")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-maxcdn" }),
              _vm._v(" "),
              _c("span", [_vm._v("maxcdn")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-mdb" }),
              _vm._v(" "),
              _c("span", [_vm._v("mdb")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-medapps" }),
              _vm._v(" "),
              _c("span", [_vm._v("medapps")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-medium" }),
              _vm._v(" "),
              _c("span", [_vm._v("medium")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-medrt" }),
              _vm._v(" "),
              _c("span", [_vm._v("medrt")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-meetup" }),
              _vm._v(" "),
              _c("span", [_vm._v("meetup")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-megaport" }),
              _vm._v(" "),
              _c("span", [_vm._v("megaport")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-mendeley" }),
              _vm._v(" "),
              _c("span", [_vm._v("mendeley")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-microblog" }),
              _vm._v(" "),
              _c("span", [_vm._v("microblog")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-microsoft" }),
              _vm._v(" "),
              _c("span", [_vm._v("microsoft")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-mix" }),
              _vm._v(" "),
              _c("span", [_vm._v("mix")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-mixcloud" }),
              _vm._v(" "),
              _c("span", [_vm._v("mixcloud")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-mixer" }),
              _vm._v(" "),
              _c("span", [_vm._v("mixer")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-mizuni" }),
              _vm._v(" "),
              _c("span", [_vm._v("mizuni")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-modx" }),
              _vm._v(" "),
              _c("span", [_vm._v("modx")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-monero" }),
              _vm._v(" "),
              _c("span", [_vm._v("monero")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-napster" }),
              _vm._v(" "),
              _c("span", [_vm._v("napster")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-neos" }),
              _vm._v(" "),
              _c("span", [_vm._v("neos")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-nimblr" }),
              _vm._v(" "),
              _c("span", [_vm._v("nimblr")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-node" }),
              _vm._v(" "),
              _c("span", [_vm._v("node")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-node-js" }),
              _vm._v(" "),
              _c("span", [_vm._v("node-js")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-npm" }),
              _vm._v(" "),
              _c("span", [_vm._v("npm")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-ns8" }),
              _vm._v(" "),
              _c("span", [_vm._v("ns8")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-nutritionix",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("nutritionix")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-octopus-deploy",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("octopus-deploy")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-odnoklassniki",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("odnoklassniki")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-odnoklassniki-square",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("odnoklassniki-square")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-old-republic",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("old-republic")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-opencart" }),
              _vm._v(" "),
              _c("span", [_vm._v("opencart")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-openid" }),
              _vm._v(" "),
              _c("span", [_vm._v("openid")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-opera" }),
              _vm._v(" "),
              _c("span", [_vm._v("opera")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-optin-monster",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("optin-monster")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-orcid" }),
              _vm._v(" "),
              _c("span", [_vm._v("orcid")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-osi" }),
              _vm._v(" "),
              _c("span", [_vm._v("osi")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-page4" }),
              _vm._v(" "),
              _c("span", [_vm._v("page4")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-pagelines" }),
              _vm._v(" "),
              _c("span", [_vm._v("pagelines")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-palfed" }),
              _vm._v(" "),
              _c("span", [_vm._v("palfed")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-patreon" }),
              _vm._v(" "),
              _c("span", [_vm._v("patreon")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-paypal" }),
              _vm._v(" "),
              _c("span", [_vm._v("paypal")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-penny-arcade",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("penny-arcade")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-perbyte" }),
              _vm._v(" "),
              _c("span", [_vm._v("perbyte")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-periscope" }),
              _vm._v(" "),
              _c("span", [_vm._v("periscope")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-phabricator",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("phabricator")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-phoenix-framework",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("phoenix-framework")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-phoenix-squadron",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("phoenix-squadron")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-php" }),
              _vm._v(" "),
              _c("span", [_vm._v("php")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-pied-piper" }),
              _vm._v(" "),
              _c("span", [_vm._v("pied-piper")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-pied-piper-alt",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("pied-piper-alt")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-pied-piper-hat",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("pied-piper-hat")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-pied-piper-pp",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("pied-piper-pp")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-pied-piper-square",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("pied-piper-square")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-pinterest" }),
              _vm._v(" "),
              _c("span", [_vm._v("pinterest")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-pinterest-p",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("pinterest-p")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-pinterest-square",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("pinterest-square")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-pix" }),
              _vm._v(" "),
              _c("span", [_vm._v("pix")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-playstation",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("playstation")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-product-hunt",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("product-hunt")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-pushed" }),
              _vm._v(" "),
              _c("span", [_vm._v("pushed")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-python" }),
              _vm._v(" "),
              _c("span", [_vm._v("python")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-qq" }),
              _vm._v(" "),
              _c("span", [_vm._v("qq")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-quinscape" }),
              _vm._v(" "),
              _c("span", [_vm._v("quinscape")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-quora" }),
              _vm._v(" "),
              _c("span", [_vm._v("quora")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-r-project" }),
              _vm._v(" "),
              _c("span", [_vm._v("r-project")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-raspberry-pi",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("raspberry-pi")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-ravelry" }),
              _vm._v(" "),
              _c("span", [_vm._v("ravelry")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-react" }),
              _vm._v(" "),
              _c("span", [_vm._v("react")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-reacteurope",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("reacteurope")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-readme" }),
              _vm._v(" "),
              _c("span", [_vm._v("readme")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-rebel" }),
              _vm._v(" "),
              _c("span", [_vm._v("rebel")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-red-river" }),
              _vm._v(" "),
              _c("span", [_vm._v("red-river")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-reddit" }),
              _vm._v(" "),
              _c("span", [_vm._v("reddit")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-reddit-alien",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("reddit-alien")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-reddit-square",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("reddit-square")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-redhat" }),
              _vm._v(" "),
              _c("span", [_vm._v("redhat")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-renren" }),
              _vm._v(" "),
              _c("span", [_vm._v("renren")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-replyd" }),
              _vm._v(" "),
              _c("span", [_vm._v("replyd")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-researchgate",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("researchgate")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-resolving" }),
              _vm._v(" "),
              _c("span", [_vm._v("resolving")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-rev" }),
              _vm._v(" "),
              _c("span", [_vm._v("rev")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-rocketchat" }),
              _vm._v(" "),
              _c("span", [_vm._v("rocketchat")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-rockrms" }),
              _vm._v(" "),
              _c("span", [_vm._v("rockrms")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-rust" }),
              _vm._v(" "),
              _c("span", [_vm._v("rust")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-safari" }),
              _vm._v(" "),
              _c("span", [_vm._v("safari")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-salesforce" }),
              _vm._v(" "),
              _c("span", [_vm._v("salesforce")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-sass" }),
              _vm._v(" "),
              _c("span", [_vm._v("sass")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-schlix" }),
              _vm._v(" "),
              _c("span", [_vm._v("schlix")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-scribd" }),
              _vm._v(" "),
              _c("span", [_vm._v("scribd")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-searchengin",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("searchengin")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-sellcast" }),
              _vm._v(" "),
              _c("span", [_vm._v("sellcast")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-sellsy" }),
              _vm._v(" "),
              _c("span", [_vm._v("sellsy")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-servicestack",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("servicestack")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-shirtsinbulk",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("shirtsinbulk")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-shopify" }),
              _vm._v(" "),
              _c("span", [_vm._v("shopify")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-shopware" }),
              _vm._v(" "),
              _c("span", [_vm._v("shopware")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-simplybuilt",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("simplybuilt")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-sistrix" }),
              _vm._v(" "),
              _c("span", [_vm._v("sistrix")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-sith" }),
              _vm._v(" "),
              _c("span", [_vm._v("sith")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-sitrox" }),
              _vm._v(" "),
              _c("span", [_vm._v("sitrox")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-sketch" }),
              _vm._v(" "),
              _c("span", [_vm._v("sketch")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-skyatlas" }),
              _vm._v(" "),
              _c("span", [_vm._v("skyatlas")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-skype" }),
              _vm._v(" "),
              _c("span", [_vm._v("skype")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-slack" }),
              _vm._v(" "),
              _c("span", [_vm._v("slack")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-slideshare" }),
              _vm._v(" "),
              _c("span", [_vm._v("slideshare")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-snapchat" }),
              _vm._v(" "),
              _c("span", [_vm._v("snapchat")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-snapchat-square",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("snapchat-square")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-soundcloud" }),
              _vm._v(" "),
              _c("span", [_vm._v("soundcloud")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-sourcetree" }),
              _vm._v(" "),
              _c("span", [_vm._v("sourcetree")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-speakap" }),
              _vm._v(" "),
              _c("span", [_vm._v("speakap")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-speaker-deck",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("speaker-deck")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-spotify" }),
              _vm._v(" "),
              _c("span", [_vm._v("spotify")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-square-font-awesome",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("square-font-awesome")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass:
                  "fab fa-lg fa-fw me-10px fa-square-font-awesome-stroke",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("square-font-awesome-stroke")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-squarespace",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("squarespace")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-stack-exchange",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("stack-exchange")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-stack-overflow",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("stack-overflow")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-stackpath" }),
              _vm._v(" "),
              _c("span", [_vm._v("stackpath")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-staylinked" }),
              _vm._v(" "),
              _c("span", [_vm._v("staylinked")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-steam" }),
              _vm._v(" "),
              _c("span", [_vm._v("steam")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-steam-square",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("steam-square")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-steam-symbol",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("steam-symbol")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-sticker-mule",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("sticker-mule")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-strava" }),
              _vm._v(" "),
              _c("span", [_vm._v("strava")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-stripe" }),
              _vm._v(" "),
              _c("span", [_vm._v("stripe")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-stripe-s" }),
              _vm._v(" "),
              _c("span", [_vm._v("stripe-s")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-studiovinari",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("studiovinari")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-stumbleupon",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("stumbleupon")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-stumbleupon-circle",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("stumbleupon-circle")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-superpowers",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("superpowers")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-supple" }),
              _vm._v(" "),
              _c("span", [_vm._v("supple")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-suse" }),
              _vm._v(" "),
              _c("span", [_vm._v("suse")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-swift" }),
              _vm._v(" "),
              _c("span", [_vm._v("swift")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-symfony" }),
              _vm._v(" "),
              _c("span", [_vm._v("symfony")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-teamspeak" }),
              _vm._v(" "),
              _c("span", [_vm._v("teamspeak")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-telegram" }),
              _vm._v(" "),
              _c("span", [_vm._v("telegram")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-tencent-weibo",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("tencent-weibo")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-the-red-yeti",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("the-red-yeti")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-themeco" }),
              _vm._v(" "),
              _c("span", [_vm._v("themeco")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-themeisle" }),
              _vm._v(" "),
              _c("span", [_vm._v("themeisle")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-think-peaks",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("think-peaks")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-tiktok" }),
              _vm._v(" "),
              _c("span", [_vm._v("tiktok")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-trade-federation",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("trade-federation")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-trello" }),
              _vm._v(" "),
              _c("span", [_vm._v("trello")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-tumblr" }),
              _vm._v(" "),
              _c("span", [_vm._v("tumblr")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-tumblr-square",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("tumblr-square")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-twitch" }),
              _vm._v(" "),
              _c("span", [_vm._v("twitch")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-twitter" }),
              _vm._v(" "),
              _c("span", [_vm._v("twitter")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-twitter-square",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("twitter-square")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-typo3" }),
              _vm._v(" "),
              _c("span", [_vm._v("typo3")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-uber" }),
              _vm._v(" "),
              _c("span", [_vm._v("uber")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-ubuntu" }),
              _vm._v(" "),
              _c("span", [_vm._v("ubuntu")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-uikit" }),
              _vm._v(" "),
              _c("span", [_vm._v("uikit")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-umbraco" }),
              _vm._v(" "),
              _c("span", [_vm._v("umbraco")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-uncharted" }),
              _vm._v(" "),
              _c("span", [_vm._v("uncharted")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-uniregistry",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("uniregistry")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-unity" }),
              _vm._v(" "),
              _c("span", [_vm._v("unity")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-unsplash" }),
              _vm._v(" "),
              _c("span", [_vm._v("unsplash")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-untappd" }),
              _vm._v(" "),
              _c("span", [_vm._v("untappd")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-ups" }),
              _vm._v(" "),
              _c("span", [_vm._v("ups")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-usb" }),
              _vm._v(" "),
              _c("span", [_vm._v("usb")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-usps" }),
              _vm._v(" "),
              _c("span", [_vm._v("usps")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-ussunnah" }),
              _vm._v(" "),
              _c("span", [_vm._v("ussunnah")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-vaadin" }),
              _vm._v(" "),
              _c("span", [_vm._v("vaadin")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-viacoin" }),
              _vm._v(" "),
              _c("span", [_vm._v("viacoin")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-viadeo" }),
              _vm._v(" "),
              _c("span", [_vm._v("viadeo")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-viadeo-square",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("viadeo-square")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-viber" }),
              _vm._v(" "),
              _c("span", [_vm._v("viber")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-vimeo" }),
              _vm._v(" "),
              _c("span", [_vm._v("vimeo")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-vimeo-square",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("vimeo-square")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-vimeo-v" }),
              _vm._v(" "),
              _c("span", [_vm._v("vimeo-v")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-vine" }),
              _vm._v(" "),
              _c("span", [_vm._v("vine")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-vk" }),
              _vm._v(" "),
              _c("span", [_vm._v("vk")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-vnv" }),
              _vm._v(" "),
              _c("span", [_vm._v("vnv")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-vuejs" }),
              _vm._v(" "),
              _c("span", [_vm._v("vuejs")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-watchman-monitoring",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("watchman-monitoring")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-waze" }),
              _vm._v(" "),
              _c("span", [_vm._v("waze")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-weebly" }),
              _vm._v(" "),
              _c("span", [_vm._v("weebly")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-weibo" }),
              _vm._v(" "),
              _c("span", [_vm._v("weibo")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-weixin" }),
              _vm._v(" "),
              _c("span", [_vm._v("weixin")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-whatsapp" }),
              _vm._v(" "),
              _c("span", [_vm._v("whatsapp")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-whatsapp-square",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("whatsapp-square")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-whmcs" }),
              _vm._v(" "),
              _c("span", [_vm._v("whmcs")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-wikipedia-w",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("wikipedia-w")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-windows" }),
              _vm._v(" "),
              _c("span", [_vm._v("windows")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-wirsindhandwerk",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("wirsindhandwerk")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-wix" }),
              _vm._v(" "),
              _c("span", [_vm._v("wix")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-wizards-of-the-coast",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("wizards-of-the-coast")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-wodu" }),
              _vm._v(" "),
              _c("span", [_vm._v("wodu")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-wolf-pack-battalion",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("wolf-pack-battalion")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-wordpress" }),
              _vm._v(" "),
              _c("span", [_vm._v("wordpress")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-wordpress-simple",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("wordpress-simple")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-wpbeginner" }),
              _vm._v(" "),
              _c("span", [_vm._v("wpbeginner")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-wpexplorer" }),
              _vm._v(" "),
              _c("span", [_vm._v("wpexplorer")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-wpforms" }),
              _vm._v(" "),
              _c("span", [_vm._v("wpforms")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-wpressr" }),
              _vm._v(" "),
              _c("span", [_vm._v("wpressr")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-xbox" }),
              _vm._v(" "),
              _c("span", [_vm._v("xbox")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-xing" }),
              _vm._v(" "),
              _c("span", [_vm._v("xing")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-xing-square",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("xing-square")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-y-combinator",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("y-combinator")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-yahoo" }),
              _vm._v(" "),
              _c("span", [_vm._v("yahoo")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-yammer" }),
              _vm._v(" "),
              _c("span", [_vm._v("yammer")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-yandex" }),
              _vm._v(" "),
              _c("span", [_vm._v("yandex")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-yandex-international",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("yandex-international")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-yarn" }),
              _vm._v(" "),
              _c("span", [_vm._v("yarn")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-yelp" }),
              _vm._v(" "),
              _c("span", [_vm._v("yelp")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-yoast" }),
              _vm._v(" "),
              _c("span", [_vm._v("yoast")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-youtube" }),
              _vm._v(" "),
              _c("span", [_vm._v("youtube")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw me-10px fa-youtube-square",
              }),
              _vm._v(" "),
              _c("span", [_vm._v("youtube-square")]),
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 mb-10px text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw me-10px fa-zhihu" }),
              _vm._v(" "),
              _c("span", [_vm._v("zhihu")]),
            ]
          ),
        ]),
      ]),
    ])
  },
]
render._withStripped = true

export { render, staticRenderFns }"}]}